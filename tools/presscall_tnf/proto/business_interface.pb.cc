// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "business_interface.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RBUDocItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RBUDocItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RBUDebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RBUDebugInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RBURequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RBURequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RBUResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RBUResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatformOutItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatformOutItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SemanticInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SemanticInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SemanticOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SemanticOutput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SemanticReqType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_business_5finterface_2eproto() {
  protobuf_AddDesc_business_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "business_interface.proto");
  GOOGLE_CHECK(file != NULL);
  RBUDocItem_descriptor_ = file->message_type(0);
  static const int RBUDocItem_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, inner_docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, doc_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, search_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, rela_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, merge_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, l0_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, l1_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, l2_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, raw_abs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, qrw_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, xob_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, su_docitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, l4_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, platform_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, qbc_info_),
  };
  RBUDocItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RBUDocItem_descriptor_,
      RBUDocItem::default_instance_,
      RBUDocItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDocItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RBUDocItem));
  SearchConfig_descriptor_ = file->message_type(1);
  static const int SearchConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, debug_info_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, xob_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, whiteboard_qrw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, qrw_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, qrw_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, dignose_queryd_req_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, dignose_abs_req_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, whiteboard_debug_flag_),
  };
  SearchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConfig_descriptor_,
      SearchConfig::default_instance_,
      SearchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConfig));
  RBUDebugInfo_descriptor_ = file->message_type(2);
  static const int RBUDebugInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, qrw_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, queryd_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, rbu_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, indexd_debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, dignose_queryd_rsp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, dignose_abs_rsp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, common_iv_debug_flag_),
  };
  RBUDebugInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RBUDebugInfo_descriptor_,
      RBUDebugInfo::default_instance_,
      RBUDebugInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUDebugInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RBUDebugInfo));
  RBURequest_descriptor_ = file->message_type(3);
  static const int RBURequest_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, search_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, search_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, num_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, debug_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, num_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, cl_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, text_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, docid_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, search_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, query_encode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, indexd_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, disable_qc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, enable_abs_highlight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, second_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, start_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, end_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, semantic_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, qc_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, max_doc_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, use_qbc_info_),
  };
  RBURequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RBURequest_descriptor_,
      RBURequest::default_instance_,
      RBURequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBURequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RBURequest));
  RBUResponse_descriptor_ = file->message_type(4);
  static const int RBUResponse_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, result_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, display_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, eresult_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, cost_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, seg_str_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, seg_int_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, qrw_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, l4_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, platform_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, semantic_response_),
  };
  RBUResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RBUResponse_descriptor_,
      RBUResponse::default_instance_,
      RBUResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBUResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RBUResponse));
  PlatformOutItem_descriptor_ = file->message_type(5);
  static const int PlatformOutItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformOutItem, qrw_item_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformOutItem, platform_output_),
  };
  PlatformOutItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatformOutItem_descriptor_,
      PlatformOutItem::default_instance_,
      PlatformOutItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformOutItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformOutItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatformOutItem));
  SemanticInput_descriptor_ = file->message_type(6);
  static const int SemanticInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, semantic_page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, semantic_num_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, semantic_start_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, semantic_end_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, semantic_req_type_),
  };
  SemanticInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SemanticInput_descriptor_,
      SemanticInput::default_instance_,
      SemanticInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SemanticInput));
  SemanticOutput_descriptor_ = file->message_type(7);
  static const int SemanticOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, semantic_result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, semantic_result_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, semantic_display_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, semantic_eresult_num_),
  };
  SemanticOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SemanticOutput_descriptor_,
      SemanticOutput::default_instance_,
      SemanticOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SemanticOutput));
  SemanticReqType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_business_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RBUDocItem_descriptor_, &RBUDocItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConfig_descriptor_, &SearchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RBUDebugInfo_descriptor_, &RBUDebugInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RBURequest_descriptor_, &RBURequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RBUResponse_descriptor_, &RBUResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatformOutItem_descriptor_, &PlatformOutItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SemanticInput_descriptor_, &SemanticInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SemanticOutput_descriptor_, &SemanticOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_business_5finterface_2eproto() {
  delete RBUDocItem::default_instance_;
  delete RBUDocItem_reflection_;
  delete SearchConfig::default_instance_;
  delete SearchConfig_reflection_;
  delete RBUDebugInfo::default_instance_;
  delete RBUDebugInfo_reflection_;
  delete RBURequest::default_instance_;
  delete RBURequest_reflection_;
  delete RBUResponse::default_instance_;
  delete RBUResponse_reflection_;
  delete PlatformOutItem::default_instance_;
  delete PlatformOutItem_reflection_;
  delete SemanticInput::default_instance_;
  delete SemanticInput_reflection_;
  delete SemanticOutput::default_instance_;
  delete SemanticOutput_reflection_;
}

void protobuf_AddDesc_business_5finterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030business_interface.proto\"\315\002\n\nRBUDocIte"
    "m\022\r\n\005docid\030\001 \001(\004\022\023\n\013inner_docid\030\002 \001(\004\022\020\n"
    "\010doc_meta\030\003 \001(\014\022\031\n\021search_debug_info\030\004 \001"
    "(\014\022\027\n\017rela_debug_info\030\005 \001(\014\022\030\n\020merge_deb"
    "ug_info\030\006 \001(\014\022\020\n\010l0_score\030\007 \001(\002\022\020\n\010l1_sc"
    "ore\030\010 \001(\002\022\020\n\010l2_score\030\t \001(\002\022\017\n\007raw_abs\030\n"
    " \001(\014\022\017\n\007qrw_idx\030\013 \001(\005\022\020\n\010xob_mask\030\014 \001(\005\022"
    "\022\n\nsu_docitem\030\r \001(\014\022\021\n\tl4_output\030\016 \001(\014\022\027"
    "\n\017platform_output\030\017 \001(\014\022\021\n\010qbc_info\030\311\001 \001"
    "(\014\"\322\001\n\014SearchConfig\022\030\n\020debug_info_level\030"
    "\001 \001(\r\022\020\n\010xob_mask\030\002 \001(\004\022\026\n\016whiteboard_qr"
    "w\030\004 \001(\014\022\016\n\006qrw_ip\030\005 \001(\014\022\020\n\010qrw_port\030\006 \001("
    "\005\022\037\n\027dignose_queryd_req_info\030\007 \001(\014\022\034\n\024di"
    "gnose_abs_req_info\030\010 \001(\014\022\035\n\025whiteboard_d"
    "ebug_flag\030\t \001(\r\"\321\001\n\014RBUDebugInfo\022\026\n\016qrw_"
    "debug_info\030\001 \001(\014\022\031\n\021queryd_debug_info\030\002 "
    "\001(\014\022\026\n\016rbu_debug_info\030\003 \001(\014\022\031\n\021indexd_de"
    "bug_info\030\005 \001(\014\022\037\n\027dignose_queryd_rsp_inf"
    "o\030\006 \001(\014\022\034\n\024dignose_abs_rsp_info\030\007 \001(\014\022\034\n"
    "\024common_iv_debug_flag\030\010 \001(\014\"\211\005\n\nRBUReque"
    "st\022\021\n\tsearch_id\030\001 \001(\014\022\021\n\tclient_ip\030\002 \001(\r"
    "\022\014\n\004echo\030\003 \001(\014\022\024\n\014search_query\030\004 \002(\014\022\022\n\007"
    "page_id\030\005 \001(\r:\0010\022\024\n\014num_per_page\030\006 \002(\r\022\024"
    "\n\trank_type\030\007 \001(\r:\0010\022\025\n\ndebug_flag\030\010 \001(\r"
    ":\0010\022\022\n\nnum_filter\030\t \001(\014\022\021\n\tcl_filter\030\n \001"
    "(\014\022\023\n\013text_filter\030\013 \001(\014\022\024\n\014docid_filter\030"
    "\014 \001(\014\022\r\n\005extra\030\r \001(\014\022$\n\rsearch_config\030\016 "
    "\001(\0132\r.SearchConfig\022\021\n\tsource_id\030\017 \001(\r\022\016\n"
    "\006app_id\030\020 \001(\r\022\024\n\014query_encode\030\021 \001(\r\022\030\n\020i"
    "ndexd_extension\030\022 \001(\014\022\031\n\ndisable_qc\030\023 \001("
    "\010:\005false\022#\n\024enable_abs_highlight\030\024 \001(\010:\005"
    "false\022\030\n\rsecond_search\030\025 \001(\r:\0010\022\014\n\004sort\030"
    "\026 \001(\014\022\021\n\tstart_idx\030\027 \001(\r\022\017\n\007end_idx\030\030 \001("
    "\r\022(\n\020semantic_request\0303 \001(\0132\016.SemanticIn"
    "put\022\022\n\006qc_bid\030\311\001 \001(\r:\0010\022\034\n\016max_doc_retur"
    "n\030\312\001 \001(\r:\003300\022\030\n\014use_qbc_info\030\313\001 \001(\r:\0010\""
    "\374\002\n\013RBUResponse\022\017\n\007retcode\030\001 \002(\005\022\016\n\006retm"
    "sg\030\002 \001(\014\022\014\n\004echo\030\003 \001(\014\022 \n\013result_list\030\004 "
    "\003(\0132\013.RBUDocItem\022\022\n\nresult_num\030\005 \002(\005\022\023\n\013"
    "display_num\030\006 \002(\005\022\023\n\013eresult_num\030\007 \002(\005\022\021"
    "\n\tcost_time\030\010 \001(\005\022!\n\ndebug_info\030\t \001(\0132\r."
    "RBUDebugInfo\022\024\n\014seg_str_list\030\n \003(\014\022\024\n\014se"
    "g_int_list\030\013 \003(\004\022\022\n\nqrw_result\030\014 \001(\014\022\021\n\t"
    "l4_output\030\r \001(\014\022)\n\017platform_output\030\016 \003(\013"
    "2\020.PlatformOutItem\022*\n\021semantic_response\030"
    "3 \001(\0132\017.SemanticOutput\"@\n\017PlatformOutIte"
    "m\022\024\n\014qrw_item_idx\030\001 \001(\005\022\027\n\017platform_outp"
    "ut\030\002 \001(\014\"\274\001\n\rSemanticInput\022\030\n\020semantic_p"
    "age_id\030\001 \001(\r\022\035\n\025semantic_num_per_page\030\002 "
    "\001(\r\022\032\n\022semantic_start_idx\030\003 \001(\r\022\030\n\020seman"
    "tic_end_idx\030\004 \001(\r\022<\n\021semantic_req_type\030\005"
    " \001(\0162\020.SemanticReqType:\017NORMAL_ONLY_REQ\""
    "\224\001\n\016SemanticOutput\022)\n\024semantic_result_li"
    "st\030\001 \003(\0132\013.RBUDocItem\022\033\n\023semantic_result"
    "_num\030\002 \001(\005\022\034\n\024semantic_display_num\030\003 \001(\005"
    "\022\034\n\024semantic_eresult_num\030\004 \001(\005*V\n\017Semant"
    "icReqType\022\027\n\023NORMAL_SEMANTIC_REQ\020\001\022\023\n\017NO"
    "RMAL_ONLY_REQ\020\002\022\025\n\021SEMANTIC_ONLY_REQ\020\003", 2318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "business_interface.proto", &protobuf_RegisterTypes);
  RBUDocItem::default_instance_ = new RBUDocItem();
  SearchConfig::default_instance_ = new SearchConfig();
  RBUDebugInfo::default_instance_ = new RBUDebugInfo();
  RBURequest::default_instance_ = new RBURequest();
  RBUResponse::default_instance_ = new RBUResponse();
  PlatformOutItem::default_instance_ = new PlatformOutItem();
  SemanticInput::default_instance_ = new SemanticInput();
  SemanticOutput::default_instance_ = new SemanticOutput();
  RBUDocItem::default_instance_->InitAsDefaultInstance();
  SearchConfig::default_instance_->InitAsDefaultInstance();
  RBUDebugInfo::default_instance_->InitAsDefaultInstance();
  RBURequest::default_instance_->InitAsDefaultInstance();
  RBUResponse::default_instance_->InitAsDefaultInstance();
  PlatformOutItem::default_instance_->InitAsDefaultInstance();
  SemanticInput::default_instance_->InitAsDefaultInstance();
  SemanticOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_business_5finterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_business_5finterface_2eproto {
  StaticDescriptorInitializer_business_5finterface_2eproto() {
    protobuf_AddDesc_business_5finterface_2eproto();
  }
} static_descriptor_initializer_business_5finterface_2eproto_;

const ::google::protobuf::EnumDescriptor* SemanticReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemanticReqType_descriptor_;
}
bool SemanticReqType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string RBUDocItem::_default_doc_meta_;
const ::std::string RBUDocItem::_default_search_debug_info_;
const ::std::string RBUDocItem::_default_rela_debug_info_;
const ::std::string RBUDocItem::_default_merge_debug_info_;
const ::std::string RBUDocItem::_default_raw_abs_;
const ::std::string RBUDocItem::_default_su_docitem_;
const ::std::string RBUDocItem::_default_l4_output_;
const ::std::string RBUDocItem::_default_platform_output_;
const ::std::string RBUDocItem::_default_qbc_info_;
#ifndef _MSC_VER
const int RBUDocItem::kDocidFieldNumber;
const int RBUDocItem::kInnerDocidFieldNumber;
const int RBUDocItem::kDocMetaFieldNumber;
const int RBUDocItem::kSearchDebugInfoFieldNumber;
const int RBUDocItem::kRelaDebugInfoFieldNumber;
const int RBUDocItem::kMergeDebugInfoFieldNumber;
const int RBUDocItem::kL0ScoreFieldNumber;
const int RBUDocItem::kL1ScoreFieldNumber;
const int RBUDocItem::kL2ScoreFieldNumber;
const int RBUDocItem::kRawAbsFieldNumber;
const int RBUDocItem::kQrwIdxFieldNumber;
const int RBUDocItem::kXobMaskFieldNumber;
const int RBUDocItem::kSuDocitemFieldNumber;
const int RBUDocItem::kL4OutputFieldNumber;
const int RBUDocItem::kPlatformOutputFieldNumber;
const int RBUDocItem::kQbcInfoFieldNumber;
#endif  // !_MSC_VER

RBUDocItem::RBUDocItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RBUDocItem::InitAsDefaultInstance() {
}

RBUDocItem::RBUDocItem(const RBUDocItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RBUDocItem::SharedCtor() {
  _cached_size_ = 0;
  docid_ = GOOGLE_ULONGLONG(0);
  inner_docid_ = GOOGLE_ULONGLONG(0);
  doc_meta_ = const_cast< ::std::string*>(&_default_doc_meta_);
  search_debug_info_ = const_cast< ::std::string*>(&_default_search_debug_info_);
  rela_debug_info_ = const_cast< ::std::string*>(&_default_rela_debug_info_);
  merge_debug_info_ = const_cast< ::std::string*>(&_default_merge_debug_info_);
  l0_score_ = 0;
  l1_score_ = 0;
  l2_score_ = 0;
  raw_abs_ = const_cast< ::std::string*>(&_default_raw_abs_);
  qrw_idx_ = 0;
  xob_mask_ = 0;
  su_docitem_ = const_cast< ::std::string*>(&_default_su_docitem_);
  l4_output_ = const_cast< ::std::string*>(&_default_l4_output_);
  platform_output_ = const_cast< ::std::string*>(&_default_platform_output_);
  qbc_info_ = const_cast< ::std::string*>(&_default_qbc_info_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RBUDocItem::~RBUDocItem() {
  SharedDtor();
}

void RBUDocItem::SharedDtor() {
  if (doc_meta_ != &_default_doc_meta_) {
    delete doc_meta_;
  }
  if (search_debug_info_ != &_default_search_debug_info_) {
    delete search_debug_info_;
  }
  if (rela_debug_info_ != &_default_rela_debug_info_) {
    delete rela_debug_info_;
  }
  if (merge_debug_info_ != &_default_merge_debug_info_) {
    delete merge_debug_info_;
  }
  if (raw_abs_ != &_default_raw_abs_) {
    delete raw_abs_;
  }
  if (su_docitem_ != &_default_su_docitem_) {
    delete su_docitem_;
  }
  if (l4_output_ != &_default_l4_output_) {
    delete l4_output_;
  }
  if (platform_output_ != &_default_platform_output_) {
    delete platform_output_;
  }
  if (qbc_info_ != &_default_qbc_info_) {
    delete qbc_info_;
  }
  if (this != default_instance_) {
  }
}

void RBUDocItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RBUDocItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RBUDocItem_descriptor_;
}

const RBUDocItem& RBUDocItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

RBUDocItem* RBUDocItem::default_instance_ = NULL;

RBUDocItem* RBUDocItem::New() const {
  return new RBUDocItem;
}

void RBUDocItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    docid_ = GOOGLE_ULONGLONG(0);
    inner_docid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (doc_meta_ != &_default_doc_meta_) {
        doc_meta_->clear();
      }
    }
    if (_has_bit(3)) {
      if (search_debug_info_ != &_default_search_debug_info_) {
        search_debug_info_->clear();
      }
    }
    if (_has_bit(4)) {
      if (rela_debug_info_ != &_default_rela_debug_info_) {
        rela_debug_info_->clear();
      }
    }
    if (_has_bit(5)) {
      if (merge_debug_info_ != &_default_merge_debug_info_) {
        merge_debug_info_->clear();
      }
    }
    l0_score_ = 0;
    l1_score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    l2_score_ = 0;
    if (_has_bit(9)) {
      if (raw_abs_ != &_default_raw_abs_) {
        raw_abs_->clear();
      }
    }
    qrw_idx_ = 0;
    xob_mask_ = 0;
    if (_has_bit(12)) {
      if (su_docitem_ != &_default_su_docitem_) {
        su_docitem_->clear();
      }
    }
    if (_has_bit(13)) {
      if (l4_output_ != &_default_l4_output_) {
        l4_output_->clear();
      }
    }
    if (_has_bit(14)) {
      if (platform_output_ != &_default_platform_output_) {
        platform_output_->clear();
      }
    }
    if (_has_bit(15)) {
      if (qbc_info_ != &_default_qbc_info_) {
        qbc_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RBUDocItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 docid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &docid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inner_docid;
        break;
      }
      
      // optional uint64 inner_docid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_docid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inner_docid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_doc_meta;
        break;
      }
      
      // optional bytes doc_meta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_doc_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_search_debug_info;
        break;
      }
      
      // optional bytes search_debug_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rela_debug_info;
        break;
      }
      
      // optional bytes rela_debug_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rela_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rela_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_merge_debug_info;
        break;
      }
      
      // optional bytes merge_debug_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_l0_score;
        break;
      }
      
      // optional float l0_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_l0_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l0_score_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_l1_score;
        break;
      }
      
      // optional float l1_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_l1_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l1_score_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_l2_score;
        break;
      }
      
      // optional float l2_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_l2_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_score_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_raw_abs;
        break;
      }
      
      // optional bytes raw_abs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_abs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_abs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_qrw_idx;
        break;
      }
      
      // optional int32 qrw_idx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrw_idx_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_xob_mask;
        break;
      }
      
      // optional int32 xob_mask = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xob_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xob_mask_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_su_docitem;
        break;
      }
      
      // optional bytes su_docitem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_su_docitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_su_docitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_l4_output;
        break;
      }
      
      // optional bytes l4_output = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l4_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l4_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_platform_output;
        break;
      }
      
      // optional bytes platform_output = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_qbc_info;
        break;
      }
      
      // optional bytes qbc_info = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qbc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qbc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RBUDocItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 docid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->docid(), output);
  }
  
  // optional uint64 inner_docid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inner_docid(), output);
  }
  
  // optional bytes doc_meta = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->doc_meta(), output);
  }
  
  // optional bytes search_debug_info = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->search_debug_info(), output);
  }
  
  // optional bytes rela_debug_info = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rela_debug_info(), output);
  }
  
  // optional bytes merge_debug_info = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->merge_debug_info(), output);
  }
  
  // optional float l0_score = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->l0_score(), output);
  }
  
  // optional float l1_score = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->l1_score(), output);
  }
  
  // optional float l2_score = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->l2_score(), output);
  }
  
  // optional bytes raw_abs = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->raw_abs(), output);
  }
  
  // optional int32 qrw_idx = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->qrw_idx(), output);
  }
  
  // optional int32 xob_mask = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xob_mask(), output);
  }
  
  // optional bytes su_docitem = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->su_docitem(), output);
  }
  
  // optional bytes l4_output = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->l4_output(), output);
  }
  
  // optional bytes platform_output = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->platform_output(), output);
  }
  
  // optional bytes qbc_info = 201;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      201, this->qbc_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RBUDocItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 docid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->docid(), target);
  }
  
  // optional uint64 inner_docid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inner_docid(), target);
  }
  
  // optional bytes doc_meta = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->doc_meta(), target);
  }
  
  // optional bytes search_debug_info = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->search_debug_info(), target);
  }
  
  // optional bytes rela_debug_info = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rela_debug_info(), target);
  }
  
  // optional bytes merge_debug_info = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->merge_debug_info(), target);
  }
  
  // optional float l0_score = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->l0_score(), target);
  }
  
  // optional float l1_score = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->l1_score(), target);
  }
  
  // optional float l2_score = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->l2_score(), target);
  }
  
  // optional bytes raw_abs = 10;
  if (_has_bit(9)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->raw_abs(), target);
  }
  
  // optional int32 qrw_idx = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->qrw_idx(), target);
  }
  
  // optional int32 xob_mask = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xob_mask(), target);
  }
  
  // optional bytes su_docitem = 13;
  if (_has_bit(12)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->su_docitem(), target);
  }
  
  // optional bytes l4_output = 14;
  if (_has_bit(13)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->l4_output(), target);
  }
  
  // optional bytes platform_output = 15;
  if (_has_bit(14)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->platform_output(), target);
  }
  
  // optional bytes qbc_info = 201;
  if (_has_bit(15)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        201, this->qbc_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RBUDocItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 docid = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->docid());
    }
    
    // optional uint64 inner_docid = 2;
    if (has_inner_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inner_docid());
    }
    
    // optional bytes doc_meta = 3;
    if (has_doc_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->doc_meta());
    }
    
    // optional bytes search_debug_info = 4;
    if (has_search_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_debug_info());
    }
    
    // optional bytes rela_debug_info = 5;
    if (has_rela_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rela_debug_info());
    }
    
    // optional bytes merge_debug_info = 6;
    if (has_merge_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_debug_info());
    }
    
    // optional float l0_score = 7;
    if (has_l0_score()) {
      total_size += 1 + 4;
    }
    
    // optional float l1_score = 8;
    if (has_l1_score()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float l2_score = 9;
    if (has_l2_score()) {
      total_size += 1 + 4;
    }
    
    // optional bytes raw_abs = 10;
    if (has_raw_abs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_abs());
    }
    
    // optional int32 qrw_idx = 11;
    if (has_qrw_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrw_idx());
    }
    
    // optional int32 xob_mask = 12;
    if (has_xob_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xob_mask());
    }
    
    // optional bytes su_docitem = 13;
    if (has_su_docitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->su_docitem());
    }
    
    // optional bytes l4_output = 14;
    if (has_l4_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->l4_output());
    }
    
    // optional bytes platform_output = 15;
    if (has_platform_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_output());
    }
    
    // optional bytes qbc_info = 201;
    if (has_qbc_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qbc_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RBUDocItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RBUDocItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RBUDocItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RBUDocItem::MergeFrom(const RBUDocItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_docid(from.docid());
    }
    if (from._has_bit(1)) {
      set_inner_docid(from.inner_docid());
    }
    if (from._has_bit(2)) {
      set_doc_meta(from.doc_meta());
    }
    if (from._has_bit(3)) {
      set_search_debug_info(from.search_debug_info());
    }
    if (from._has_bit(4)) {
      set_rela_debug_info(from.rela_debug_info());
    }
    if (from._has_bit(5)) {
      set_merge_debug_info(from.merge_debug_info());
    }
    if (from._has_bit(6)) {
      set_l0_score(from.l0_score());
    }
    if (from._has_bit(7)) {
      set_l1_score(from.l1_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_l2_score(from.l2_score());
    }
    if (from._has_bit(9)) {
      set_raw_abs(from.raw_abs());
    }
    if (from._has_bit(10)) {
      set_qrw_idx(from.qrw_idx());
    }
    if (from._has_bit(11)) {
      set_xob_mask(from.xob_mask());
    }
    if (from._has_bit(12)) {
      set_su_docitem(from.su_docitem());
    }
    if (from._has_bit(13)) {
      set_l4_output(from.l4_output());
    }
    if (from._has_bit(14)) {
      set_platform_output(from.platform_output());
    }
    if (from._has_bit(15)) {
      set_qbc_info(from.qbc_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RBUDocItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RBUDocItem::CopyFrom(const RBUDocItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RBUDocItem::IsInitialized() const {
  
  return true;
}

void RBUDocItem::Swap(RBUDocItem* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(inner_docid_, other->inner_docid_);
    std::swap(doc_meta_, other->doc_meta_);
    std::swap(search_debug_info_, other->search_debug_info_);
    std::swap(rela_debug_info_, other->rela_debug_info_);
    std::swap(merge_debug_info_, other->merge_debug_info_);
    std::swap(l0_score_, other->l0_score_);
    std::swap(l1_score_, other->l1_score_);
    std::swap(l2_score_, other->l2_score_);
    std::swap(raw_abs_, other->raw_abs_);
    std::swap(qrw_idx_, other->qrw_idx_);
    std::swap(xob_mask_, other->xob_mask_);
    std::swap(su_docitem_, other->su_docitem_);
    std::swap(l4_output_, other->l4_output_);
    std::swap(platform_output_, other->platform_output_);
    std::swap(qbc_info_, other->qbc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RBUDocItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RBUDocItem_descriptor_;
  metadata.reflection = RBUDocItem_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SearchConfig::_default_whiteboard_qrw_;
const ::std::string SearchConfig::_default_qrw_ip_;
const ::std::string SearchConfig::_default_dignose_queryd_req_info_;
const ::std::string SearchConfig::_default_dignose_abs_req_info_;
#ifndef _MSC_VER
const int SearchConfig::kDebugInfoLevelFieldNumber;
const int SearchConfig::kXobMaskFieldNumber;
const int SearchConfig::kWhiteboardQrwFieldNumber;
const int SearchConfig::kQrwIpFieldNumber;
const int SearchConfig::kQrwPortFieldNumber;
const int SearchConfig::kDignoseQuerydReqInfoFieldNumber;
const int SearchConfig::kDignoseAbsReqInfoFieldNumber;
const int SearchConfig::kWhiteboardDebugFlagFieldNumber;
#endif  // !_MSC_VER

SearchConfig::SearchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchConfig::InitAsDefaultInstance() {
}

SearchConfig::SearchConfig(const SearchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchConfig::SharedCtor() {
  _cached_size_ = 0;
  debug_info_level_ = 0u;
  xob_mask_ = GOOGLE_ULONGLONG(0);
  whiteboard_qrw_ = const_cast< ::std::string*>(&_default_whiteboard_qrw_);
  qrw_ip_ = const_cast< ::std::string*>(&_default_qrw_ip_);
  qrw_port_ = 0;
  dignose_queryd_req_info_ = const_cast< ::std::string*>(&_default_dignose_queryd_req_info_);
  dignose_abs_req_info_ = const_cast< ::std::string*>(&_default_dignose_abs_req_info_);
  whiteboard_debug_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConfig::~SearchConfig() {
  SharedDtor();
}

void SearchConfig::SharedDtor() {
  if (whiteboard_qrw_ != &_default_whiteboard_qrw_) {
    delete whiteboard_qrw_;
  }
  if (qrw_ip_ != &_default_qrw_ip_) {
    delete qrw_ip_;
  }
  if (dignose_queryd_req_info_ != &_default_dignose_queryd_req_info_) {
    delete dignose_queryd_req_info_;
  }
  if (dignose_abs_req_info_ != &_default_dignose_abs_req_info_) {
    delete dignose_abs_req_info_;
  }
  if (this != default_instance_) {
  }
}

void SearchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConfig_descriptor_;
}

const SearchConfig& SearchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

SearchConfig* SearchConfig::default_instance_ = NULL;

SearchConfig* SearchConfig::New() const {
  return new SearchConfig;
}

void SearchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debug_info_level_ = 0u;
    xob_mask_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (whiteboard_qrw_ != &_default_whiteboard_qrw_) {
        whiteboard_qrw_->clear();
      }
    }
    if (_has_bit(3)) {
      if (qrw_ip_ != &_default_qrw_ip_) {
        qrw_ip_->clear();
      }
    }
    qrw_port_ = 0;
    if (_has_bit(5)) {
      if (dignose_queryd_req_info_ != &_default_dignose_queryd_req_info_) {
        dignose_queryd_req_info_->clear();
      }
    }
    if (_has_bit(6)) {
      if (dignose_abs_req_info_ != &_default_dignose_abs_req_info_) {
        dignose_abs_req_info_->clear();
      }
    }
    whiteboard_debug_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 debug_info_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_info_level_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xob_mask;
        break;
      }
      
      // optional uint64 xob_mask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xob_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xob_mask_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_whiteboard_qrw;
        break;
      }
      
      // optional bytes whiteboard_qrw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whiteboard_qrw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_whiteboard_qrw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_qrw_ip;
        break;
      }
      
      // optional bytes qrw_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qrw_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_qrw_port;
        break;
      }
      
      // optional int32 qrw_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrw_port_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dignose_queryd_req_info;
        break;
      }
      
      // optional bytes dignose_queryd_req_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dignose_queryd_req_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dignose_queryd_req_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dignose_abs_req_info;
        break;
      }
      
      // optional bytes dignose_abs_req_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dignose_abs_req_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dignose_abs_req_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_whiteboard_debug_flag;
        break;
      }
      
      // optional uint32 whiteboard_debug_flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whiteboard_debug_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &whiteboard_debug_flag_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 debug_info_level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->debug_info_level(), output);
  }
  
  // optional uint64 xob_mask = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->xob_mask(), output);
  }
  
  // optional bytes whiteboard_qrw = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->whiteboard_qrw(), output);
  }
  
  // optional bytes qrw_ip = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->qrw_ip(), output);
  }
  
  // optional int32 qrw_port = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qrw_port(), output);
  }
  
  // optional bytes dignose_queryd_req_info = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dignose_queryd_req_info(), output);
  }
  
  // optional bytes dignose_abs_req_info = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->dignose_abs_req_info(), output);
  }
  
  // optional uint32 whiteboard_debug_flag = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->whiteboard_debug_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 debug_info_level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->debug_info_level(), target);
  }
  
  // optional uint64 xob_mask = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->xob_mask(), target);
  }
  
  // optional bytes whiteboard_qrw = 4;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->whiteboard_qrw(), target);
  }
  
  // optional bytes qrw_ip = 5;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->qrw_ip(), target);
  }
  
  // optional int32 qrw_port = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qrw_port(), target);
  }
  
  // optional bytes dignose_queryd_req_info = 7;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dignose_queryd_req_info(), target);
  }
  
  // optional bytes dignose_abs_req_info = 8;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->dignose_abs_req_info(), target);
  }
  
  // optional uint32 whiteboard_debug_flag = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->whiteboard_debug_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 debug_info_level = 1;
    if (has_debug_info_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_info_level());
    }
    
    // optional uint64 xob_mask = 2;
    if (has_xob_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xob_mask());
    }
    
    // optional bytes whiteboard_qrw = 4;
    if (has_whiteboard_qrw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->whiteboard_qrw());
    }
    
    // optional bytes qrw_ip = 5;
    if (has_qrw_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qrw_ip());
    }
    
    // optional int32 qrw_port = 6;
    if (has_qrw_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrw_port());
    }
    
    // optional bytes dignose_queryd_req_info = 7;
    if (has_dignose_queryd_req_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dignose_queryd_req_info());
    }
    
    // optional bytes dignose_abs_req_info = 8;
    if (has_dignose_abs_req_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dignose_abs_req_info());
    }
    
    // optional uint32 whiteboard_debug_flag = 9;
    if (has_whiteboard_debug_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->whiteboard_debug_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConfig::MergeFrom(const SearchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_debug_info_level(from.debug_info_level());
    }
    if (from._has_bit(1)) {
      set_xob_mask(from.xob_mask());
    }
    if (from._has_bit(2)) {
      set_whiteboard_qrw(from.whiteboard_qrw());
    }
    if (from._has_bit(3)) {
      set_qrw_ip(from.qrw_ip());
    }
    if (from._has_bit(4)) {
      set_qrw_port(from.qrw_port());
    }
    if (from._has_bit(5)) {
      set_dignose_queryd_req_info(from.dignose_queryd_req_info());
    }
    if (from._has_bit(6)) {
      set_dignose_abs_req_info(from.dignose_abs_req_info());
    }
    if (from._has_bit(7)) {
      set_whiteboard_debug_flag(from.whiteboard_debug_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConfig::CopyFrom(const SearchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConfig::IsInitialized() const {
  
  return true;
}

void SearchConfig::Swap(SearchConfig* other) {
  if (other != this) {
    std::swap(debug_info_level_, other->debug_info_level_);
    std::swap(xob_mask_, other->xob_mask_);
    std::swap(whiteboard_qrw_, other->whiteboard_qrw_);
    std::swap(qrw_ip_, other->qrw_ip_);
    std::swap(qrw_port_, other->qrw_port_);
    std::swap(dignose_queryd_req_info_, other->dignose_queryd_req_info_);
    std::swap(dignose_abs_req_info_, other->dignose_abs_req_info_);
    std::swap(whiteboard_debug_flag_, other->whiteboard_debug_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConfig_descriptor_;
  metadata.reflection = SearchConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RBUDebugInfo::_default_qrw_debug_info_;
const ::std::string RBUDebugInfo::_default_queryd_debug_info_;
const ::std::string RBUDebugInfo::_default_rbu_debug_info_;
const ::std::string RBUDebugInfo::_default_indexd_debug_info_;
const ::std::string RBUDebugInfo::_default_dignose_queryd_rsp_info_;
const ::std::string RBUDebugInfo::_default_dignose_abs_rsp_info_;
const ::std::string RBUDebugInfo::_default_common_iv_debug_flag_;
#ifndef _MSC_VER
const int RBUDebugInfo::kQrwDebugInfoFieldNumber;
const int RBUDebugInfo::kQuerydDebugInfoFieldNumber;
const int RBUDebugInfo::kRbuDebugInfoFieldNumber;
const int RBUDebugInfo::kIndexdDebugInfoFieldNumber;
const int RBUDebugInfo::kDignoseQuerydRspInfoFieldNumber;
const int RBUDebugInfo::kDignoseAbsRspInfoFieldNumber;
const int RBUDebugInfo::kCommonIvDebugFlagFieldNumber;
#endif  // !_MSC_VER

RBUDebugInfo::RBUDebugInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RBUDebugInfo::InitAsDefaultInstance() {
}

RBUDebugInfo::RBUDebugInfo(const RBUDebugInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RBUDebugInfo::SharedCtor() {
  _cached_size_ = 0;
  qrw_debug_info_ = const_cast< ::std::string*>(&_default_qrw_debug_info_);
  queryd_debug_info_ = const_cast< ::std::string*>(&_default_queryd_debug_info_);
  rbu_debug_info_ = const_cast< ::std::string*>(&_default_rbu_debug_info_);
  indexd_debug_info_ = const_cast< ::std::string*>(&_default_indexd_debug_info_);
  dignose_queryd_rsp_info_ = const_cast< ::std::string*>(&_default_dignose_queryd_rsp_info_);
  dignose_abs_rsp_info_ = const_cast< ::std::string*>(&_default_dignose_abs_rsp_info_);
  common_iv_debug_flag_ = const_cast< ::std::string*>(&_default_common_iv_debug_flag_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RBUDebugInfo::~RBUDebugInfo() {
  SharedDtor();
}

void RBUDebugInfo::SharedDtor() {
  if (qrw_debug_info_ != &_default_qrw_debug_info_) {
    delete qrw_debug_info_;
  }
  if (queryd_debug_info_ != &_default_queryd_debug_info_) {
    delete queryd_debug_info_;
  }
  if (rbu_debug_info_ != &_default_rbu_debug_info_) {
    delete rbu_debug_info_;
  }
  if (indexd_debug_info_ != &_default_indexd_debug_info_) {
    delete indexd_debug_info_;
  }
  if (dignose_queryd_rsp_info_ != &_default_dignose_queryd_rsp_info_) {
    delete dignose_queryd_rsp_info_;
  }
  if (dignose_abs_rsp_info_ != &_default_dignose_abs_rsp_info_) {
    delete dignose_abs_rsp_info_;
  }
  if (common_iv_debug_flag_ != &_default_common_iv_debug_flag_) {
    delete common_iv_debug_flag_;
  }
  if (this != default_instance_) {
  }
}

void RBUDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RBUDebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RBUDebugInfo_descriptor_;
}

const RBUDebugInfo& RBUDebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

RBUDebugInfo* RBUDebugInfo::default_instance_ = NULL;

RBUDebugInfo* RBUDebugInfo::New() const {
  return new RBUDebugInfo;
}

void RBUDebugInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (qrw_debug_info_ != &_default_qrw_debug_info_) {
        qrw_debug_info_->clear();
      }
    }
    if (_has_bit(1)) {
      if (queryd_debug_info_ != &_default_queryd_debug_info_) {
        queryd_debug_info_->clear();
      }
    }
    if (_has_bit(2)) {
      if (rbu_debug_info_ != &_default_rbu_debug_info_) {
        rbu_debug_info_->clear();
      }
    }
    if (_has_bit(3)) {
      if (indexd_debug_info_ != &_default_indexd_debug_info_) {
        indexd_debug_info_->clear();
      }
    }
    if (_has_bit(4)) {
      if (dignose_queryd_rsp_info_ != &_default_dignose_queryd_rsp_info_) {
        dignose_queryd_rsp_info_->clear();
      }
    }
    if (_has_bit(5)) {
      if (dignose_abs_rsp_info_ != &_default_dignose_abs_rsp_info_) {
        dignose_abs_rsp_info_->clear();
      }
    }
    if (_has_bit(6)) {
      if (common_iv_debug_flag_ != &_default_common_iv_debug_flag_) {
        common_iv_debug_flag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RBUDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes qrw_debug_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qrw_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryd_debug_info;
        break;
      }
      
      // optional bytes queryd_debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryd_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_queryd_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rbu_debug_info;
        break;
      }
      
      // optional bytes rbu_debug_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rbu_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rbu_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_indexd_debug_info;
        break;
      }
      
      // optional bytes indexd_debug_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexd_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexd_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dignose_queryd_rsp_info;
        break;
      }
      
      // optional bytes dignose_queryd_rsp_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dignose_queryd_rsp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dignose_queryd_rsp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dignose_abs_rsp_info;
        break;
      }
      
      // optional bytes dignose_abs_rsp_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dignose_abs_rsp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dignose_abs_rsp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_common_iv_debug_flag;
        break;
      }
      
      // optional bytes common_iv_debug_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common_iv_debug_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_common_iv_debug_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RBUDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes qrw_debug_info = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->qrw_debug_info(), output);
  }
  
  // optional bytes queryd_debug_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->queryd_debug_info(), output);
  }
  
  // optional bytes rbu_debug_info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rbu_debug_info(), output);
  }
  
  // optional bytes indexd_debug_info = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->indexd_debug_info(), output);
  }
  
  // optional bytes dignose_queryd_rsp_info = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->dignose_queryd_rsp_info(), output);
  }
  
  // optional bytes dignose_abs_rsp_info = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dignose_abs_rsp_info(), output);
  }
  
  // optional bytes common_iv_debug_flag = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->common_iv_debug_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RBUDebugInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes qrw_debug_info = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->qrw_debug_info(), target);
  }
  
  // optional bytes queryd_debug_info = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->queryd_debug_info(), target);
  }
  
  // optional bytes rbu_debug_info = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rbu_debug_info(), target);
  }
  
  // optional bytes indexd_debug_info = 5;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->indexd_debug_info(), target);
  }
  
  // optional bytes dignose_queryd_rsp_info = 6;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->dignose_queryd_rsp_info(), target);
  }
  
  // optional bytes dignose_abs_rsp_info = 7;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dignose_abs_rsp_info(), target);
  }
  
  // optional bytes common_iv_debug_flag = 8;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->common_iv_debug_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RBUDebugInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes qrw_debug_info = 1;
    if (has_qrw_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qrw_debug_info());
    }
    
    // optional bytes queryd_debug_info = 2;
    if (has_queryd_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->queryd_debug_info());
    }
    
    // optional bytes rbu_debug_info = 3;
    if (has_rbu_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rbu_debug_info());
    }
    
    // optional bytes indexd_debug_info = 5;
    if (has_indexd_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexd_debug_info());
    }
    
    // optional bytes dignose_queryd_rsp_info = 6;
    if (has_dignose_queryd_rsp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dignose_queryd_rsp_info());
    }
    
    // optional bytes dignose_abs_rsp_info = 7;
    if (has_dignose_abs_rsp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dignose_abs_rsp_info());
    }
    
    // optional bytes common_iv_debug_flag = 8;
    if (has_common_iv_debug_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->common_iv_debug_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RBUDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RBUDebugInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RBUDebugInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RBUDebugInfo::MergeFrom(const RBUDebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_qrw_debug_info(from.qrw_debug_info());
    }
    if (from._has_bit(1)) {
      set_queryd_debug_info(from.queryd_debug_info());
    }
    if (from._has_bit(2)) {
      set_rbu_debug_info(from.rbu_debug_info());
    }
    if (from._has_bit(3)) {
      set_indexd_debug_info(from.indexd_debug_info());
    }
    if (from._has_bit(4)) {
      set_dignose_queryd_rsp_info(from.dignose_queryd_rsp_info());
    }
    if (from._has_bit(5)) {
      set_dignose_abs_rsp_info(from.dignose_abs_rsp_info());
    }
    if (from._has_bit(6)) {
      set_common_iv_debug_flag(from.common_iv_debug_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RBUDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RBUDebugInfo::CopyFrom(const RBUDebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RBUDebugInfo::IsInitialized() const {
  
  return true;
}

void RBUDebugInfo::Swap(RBUDebugInfo* other) {
  if (other != this) {
    std::swap(qrw_debug_info_, other->qrw_debug_info_);
    std::swap(queryd_debug_info_, other->queryd_debug_info_);
    std::swap(rbu_debug_info_, other->rbu_debug_info_);
    std::swap(indexd_debug_info_, other->indexd_debug_info_);
    std::swap(dignose_queryd_rsp_info_, other->dignose_queryd_rsp_info_);
    std::swap(dignose_abs_rsp_info_, other->dignose_abs_rsp_info_);
    std::swap(common_iv_debug_flag_, other->common_iv_debug_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RBUDebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RBUDebugInfo_descriptor_;
  metadata.reflection = RBUDebugInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RBURequest::_default_search_id_;
const ::std::string RBURequest::_default_echo_;
const ::std::string RBURequest::_default_search_query_;
const ::std::string RBURequest::_default_num_filter_;
const ::std::string RBURequest::_default_cl_filter_;
const ::std::string RBURequest::_default_text_filter_;
const ::std::string RBURequest::_default_docid_filter_;
const ::std::string RBURequest::_default_extra_;
const ::std::string RBURequest::_default_indexd_extension_;
const ::std::string RBURequest::_default_sort_;
#ifndef _MSC_VER
const int RBURequest::kSearchIdFieldNumber;
const int RBURequest::kClientIpFieldNumber;
const int RBURequest::kEchoFieldNumber;
const int RBURequest::kSearchQueryFieldNumber;
const int RBURequest::kPageIdFieldNumber;
const int RBURequest::kNumPerPageFieldNumber;
const int RBURequest::kRankTypeFieldNumber;
const int RBURequest::kDebugFlagFieldNumber;
const int RBURequest::kNumFilterFieldNumber;
const int RBURequest::kClFilterFieldNumber;
const int RBURequest::kTextFilterFieldNumber;
const int RBURequest::kDocidFilterFieldNumber;
const int RBURequest::kExtraFieldNumber;
const int RBURequest::kSearchConfigFieldNumber;
const int RBURequest::kSourceIdFieldNumber;
const int RBURequest::kAppIdFieldNumber;
const int RBURequest::kQueryEncodeFieldNumber;
const int RBURequest::kIndexdExtensionFieldNumber;
const int RBURequest::kDisableQcFieldNumber;
const int RBURequest::kEnableAbsHighlightFieldNumber;
const int RBURequest::kSecondSearchFieldNumber;
const int RBURequest::kSortFieldNumber;
const int RBURequest::kStartIdxFieldNumber;
const int RBURequest::kEndIdxFieldNumber;
const int RBURequest::kSemanticRequestFieldNumber;
const int RBURequest::kQcBidFieldNumber;
const int RBURequest::kMaxDocReturnFieldNumber;
const int RBURequest::kUseQbcInfoFieldNumber;
#endif  // !_MSC_VER

RBURequest::RBURequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RBURequest::InitAsDefaultInstance() {
  search_config_ = const_cast< ::SearchConfig*>(&::SearchConfig::default_instance());
  semantic_request_ = const_cast< ::SemanticInput*>(&::SemanticInput::default_instance());
}

RBURequest::RBURequest(const RBURequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RBURequest::SharedCtor() {
  _cached_size_ = 0;
  search_id_ = const_cast< ::std::string*>(&_default_search_id_);
  client_ip_ = 0u;
  echo_ = const_cast< ::std::string*>(&_default_echo_);
  search_query_ = const_cast< ::std::string*>(&_default_search_query_);
  page_id_ = 0u;
  num_per_page_ = 0u;
  rank_type_ = 0u;
  debug_flag_ = 0u;
  num_filter_ = const_cast< ::std::string*>(&_default_num_filter_);
  cl_filter_ = const_cast< ::std::string*>(&_default_cl_filter_);
  text_filter_ = const_cast< ::std::string*>(&_default_text_filter_);
  docid_filter_ = const_cast< ::std::string*>(&_default_docid_filter_);
  extra_ = const_cast< ::std::string*>(&_default_extra_);
  search_config_ = NULL;
  source_id_ = 0u;
  app_id_ = 0u;
  query_encode_ = 0u;
  indexd_extension_ = const_cast< ::std::string*>(&_default_indexd_extension_);
  disable_qc_ = false;
  enable_abs_highlight_ = false;
  second_search_ = 0u;
  sort_ = const_cast< ::std::string*>(&_default_sort_);
  start_idx_ = 0u;
  end_idx_ = 0u;
  semantic_request_ = NULL;
  qc_bid_ = 0u;
  max_doc_return_ = 300u;
  use_qbc_info_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RBURequest::~RBURequest() {
  SharedDtor();
}

void RBURequest::SharedDtor() {
  if (search_id_ != &_default_search_id_) {
    delete search_id_;
  }
  if (echo_ != &_default_echo_) {
    delete echo_;
  }
  if (search_query_ != &_default_search_query_) {
    delete search_query_;
  }
  if (num_filter_ != &_default_num_filter_) {
    delete num_filter_;
  }
  if (cl_filter_ != &_default_cl_filter_) {
    delete cl_filter_;
  }
  if (text_filter_ != &_default_text_filter_) {
    delete text_filter_;
  }
  if (docid_filter_ != &_default_docid_filter_) {
    delete docid_filter_;
  }
  if (extra_ != &_default_extra_) {
    delete extra_;
  }
  if (indexd_extension_ != &_default_indexd_extension_) {
    delete indexd_extension_;
  }
  if (sort_ != &_default_sort_) {
    delete sort_;
  }
  if (this != default_instance_) {
    delete search_config_;
    delete semantic_request_;
  }
}

void RBURequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RBURequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RBURequest_descriptor_;
}

const RBURequest& RBURequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

RBURequest* RBURequest::default_instance_ = NULL;

RBURequest* RBURequest::New() const {
  return new RBURequest;
}

void RBURequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (search_id_ != &_default_search_id_) {
        search_id_->clear();
      }
    }
    client_ip_ = 0u;
    if (_has_bit(2)) {
      if (echo_ != &_default_echo_) {
        echo_->clear();
      }
    }
    if (_has_bit(3)) {
      if (search_query_ != &_default_search_query_) {
        search_query_->clear();
      }
    }
    page_id_ = 0u;
    num_per_page_ = 0u;
    rank_type_ = 0u;
    debug_flag_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (num_filter_ != &_default_num_filter_) {
        num_filter_->clear();
      }
    }
    if (_has_bit(9)) {
      if (cl_filter_ != &_default_cl_filter_) {
        cl_filter_->clear();
      }
    }
    if (_has_bit(10)) {
      if (text_filter_ != &_default_text_filter_) {
        text_filter_->clear();
      }
    }
    if (_has_bit(11)) {
      if (docid_filter_ != &_default_docid_filter_) {
        docid_filter_->clear();
      }
    }
    if (_has_bit(12)) {
      if (extra_ != &_default_extra_) {
        extra_->clear();
      }
    }
    if (_has_bit(13)) {
      if (search_config_ != NULL) search_config_->::SearchConfig::Clear();
    }
    source_id_ = 0u;
    app_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    query_encode_ = 0u;
    if (_has_bit(17)) {
      if (indexd_extension_ != &_default_indexd_extension_) {
        indexd_extension_->clear();
      }
    }
    disable_qc_ = false;
    enable_abs_highlight_ = false;
    second_search_ = 0u;
    if (_has_bit(21)) {
      if (sort_ != &_default_sort_) {
        sort_->clear();
      }
    }
    start_idx_ = 0u;
    end_idx_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (semantic_request_ != NULL) semantic_request_->::SemanticInput::Clear();
    }
    qc_bid_ = 0u;
    max_doc_return_ = 300u;
    use_qbc_info_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RBURequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes search_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_ip;
        break;
      }
      
      // optional uint32 client_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_echo;
        break;
      }
      
      // optional bytes echo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_search_query;
        break;
      }
      
      // required bytes search_query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_page_id;
        break;
      }
      
      // optional uint32 page_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_per_page;
        break;
      }
      
      // required uint32 num_per_page = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_per_page_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rank_type;
        break;
      }
      
      // optional uint32 rank_type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_debug_flag;
        break;
      }
      
      // optional uint32 debug_flag = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_flag_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_num_filter;
        break;
      }
      
      // optional bytes num_filter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_num_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cl_filter;
        break;
      }
      
      // optional bytes cl_filter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cl_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_text_filter;
        break;
      }
      
      // optional bytes text_filter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_docid_filter;
        break;
      }
      
      // optional bytes docid_filter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docid_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_docid_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_extra;
        break;
      }
      
      // optional bytes extra = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_search_config;
        break;
      }
      
      // optional .SearchConfig search_config = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_source_id;
        break;
      }
      
      // optional uint32 source_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_app_id;
        break;
      }
      
      // optional uint32 app_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_query_encode;
        break;
      }
      
      // optional uint32 query_encode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_encode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_encode_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_indexd_extension;
        break;
      }
      
      // optional bytes indexd_extension = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexd_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexd_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_disable_qc;
        break;
      }
      
      // optional bool disable_qc = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_qc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_qc_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_enable_abs_highlight;
        break;
      }
      
      // optional bool enable_abs_highlight = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_abs_highlight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_abs_highlight_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_second_search;
        break;
      }
      
      // optional uint32 second_search = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_search_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_sort;
        break;
      }
      
      // optional bytes sort = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_start_idx;
        break;
      }
      
      // optional uint32 start_idx = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_idx_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_end_idx;
        break;
      }
      
      // optional uint32 end_idx = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_idx_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_semantic_request;
        break;
      }
      
      // optional .SemanticInput semantic_request = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_semantic_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_semantic_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_qc_bid;
        break;
      }
      
      // optional uint32 qc_bid = 201 [default = 0];
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qc_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qc_bid_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_max_doc_return;
        break;
      }
      
      // optional uint32 max_doc_return = 202 [default = 300];
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_doc_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_doc_return_)));
          _set_bit(26);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1624)) goto parse_use_qbc_info;
        break;
      }
      
      // optional uint32 use_qbc_info = 203 [default = 0];
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_qbc_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_qbc_info_)));
          _set_bit(27);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RBURequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes search_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->search_id(), output);
  }
  
  // optional uint32 client_ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_ip(), output);
  }
  
  // optional bytes echo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->echo(), output);
  }
  
  // required bytes search_query = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->search_query(), output);
  }
  
  // optional uint32 page_id = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_id(), output);
  }
  
  // required uint32 num_per_page = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_per_page(), output);
  }
  
  // optional uint32 rank_type = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank_type(), output);
  }
  
  // optional uint32 debug_flag = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->debug_flag(), output);
  }
  
  // optional bytes num_filter = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->num_filter(), output);
  }
  
  // optional bytes cl_filter = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->cl_filter(), output);
  }
  
  // optional bytes text_filter = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->text_filter(), output);
  }
  
  // optional bytes docid_filter = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->docid_filter(), output);
  }
  
  // optional bytes extra = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->extra(), output);
  }
  
  // optional .SearchConfig search_config = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->search_config(), output);
  }
  
  // optional uint32 source_id = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->source_id(), output);
  }
  
  // optional uint32 app_id = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->app_id(), output);
  }
  
  // optional uint32 query_encode = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->query_encode(), output);
  }
  
  // optional bytes indexd_extension = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->indexd_extension(), output);
  }
  
  // optional bool disable_qc = 19 [default = false];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->disable_qc(), output);
  }
  
  // optional bool enable_abs_highlight = 20 [default = false];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->enable_abs_highlight(), output);
  }
  
  // optional uint32 second_search = 21 [default = 0];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->second_search(), output);
  }
  
  // optional bytes sort = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->sort(), output);
  }
  
  // optional uint32 start_idx = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->start_idx(), output);
  }
  
  // optional uint32 end_idx = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->end_idx(), output);
  }
  
  // optional .SemanticInput semantic_request = 51;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->semantic_request(), output);
  }
  
  // optional uint32 qc_bid = 201 [default = 0];
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(201, this->qc_bid(), output);
  }
  
  // optional uint32 max_doc_return = 202 [default = 300];
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(202, this->max_doc_return(), output);
  }
  
  // optional uint32 use_qbc_info = 203 [default = 0];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(203, this->use_qbc_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RBURequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes search_id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->search_id(), target);
  }
  
  // optional uint32 client_ip = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_ip(), target);
  }
  
  // optional bytes echo = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->echo(), target);
  }
  
  // required bytes search_query = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->search_query(), target);
  }
  
  // optional uint32 page_id = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->page_id(), target);
  }
  
  // required uint32 num_per_page = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_per_page(), target);
  }
  
  // optional uint32 rank_type = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rank_type(), target);
  }
  
  // optional uint32 debug_flag = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->debug_flag(), target);
  }
  
  // optional bytes num_filter = 9;
  if (_has_bit(8)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->num_filter(), target);
  }
  
  // optional bytes cl_filter = 10;
  if (_has_bit(9)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->cl_filter(), target);
  }
  
  // optional bytes text_filter = 11;
  if (_has_bit(10)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->text_filter(), target);
  }
  
  // optional bytes docid_filter = 12;
  if (_has_bit(11)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->docid_filter(), target);
  }
  
  // optional bytes extra = 13;
  if (_has_bit(12)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->extra(), target);
  }
  
  // optional .SearchConfig search_config = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->search_config(), target);
  }
  
  // optional uint32 source_id = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->source_id(), target);
  }
  
  // optional uint32 app_id = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->app_id(), target);
  }
  
  // optional uint32 query_encode = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->query_encode(), target);
  }
  
  // optional bytes indexd_extension = 18;
  if (_has_bit(17)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->indexd_extension(), target);
  }
  
  // optional bool disable_qc = 19 [default = false];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->disable_qc(), target);
  }
  
  // optional bool enable_abs_highlight = 20 [default = false];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->enable_abs_highlight(), target);
  }
  
  // optional uint32 second_search = 21 [default = 0];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->second_search(), target);
  }
  
  // optional bytes sort = 22;
  if (_has_bit(21)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->sort(), target);
  }
  
  // optional uint32 start_idx = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->start_idx(), target);
  }
  
  // optional uint32 end_idx = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->end_idx(), target);
  }
  
  // optional .SemanticInput semantic_request = 51;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->semantic_request(), target);
  }
  
  // optional uint32 qc_bid = 201 [default = 0];
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(201, this->qc_bid(), target);
  }
  
  // optional uint32 max_doc_return = 202 [default = 300];
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(202, this->max_doc_return(), target);
  }
  
  // optional uint32 use_qbc_info = 203 [default = 0];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(203, this->use_qbc_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RBURequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes search_id = 1;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_id());
    }
    
    // optional uint32 client_ip = 2;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }
    
    // optional bytes echo = 3;
    if (has_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echo());
    }
    
    // required bytes search_query = 4;
    if (has_search_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_query());
    }
    
    // optional uint32 page_id = 5 [default = 0];
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_id());
    }
    
    // required uint32 num_per_page = 6;
    if (has_num_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_per_page());
    }
    
    // optional uint32 rank_type = 7 [default = 0];
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }
    
    // optional uint32 debug_flag = 8 [default = 0];
    if (has_debug_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_flag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes num_filter = 9;
    if (has_num_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->num_filter());
    }
    
    // optional bytes cl_filter = 10;
    if (has_cl_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_filter());
    }
    
    // optional bytes text_filter = 11;
    if (has_text_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text_filter());
    }
    
    // optional bytes docid_filter = 12;
    if (has_docid_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->docid_filter());
    }
    
    // optional bytes extra = 13;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }
    
    // optional .SearchConfig search_config = 14;
    if (has_search_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_config());
    }
    
    // optional uint32 source_id = 15;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }
    
    // optional uint32 app_id = 16;
    if (has_app_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 query_encode = 17;
    if (has_query_encode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_encode());
    }
    
    // optional bytes indexd_extension = 18;
    if (has_indexd_extension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexd_extension());
    }
    
    // optional bool disable_qc = 19 [default = false];
    if (has_disable_qc()) {
      total_size += 2 + 1;
    }
    
    // optional bool enable_abs_highlight = 20 [default = false];
    if (has_enable_abs_highlight()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 second_search = 21 [default = 0];
    if (has_second_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second_search());
    }
    
    // optional bytes sort = 22;
    if (has_sort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sort());
    }
    
    // optional uint32 start_idx = 23;
    if (has_start_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_idx());
    }
    
    // optional uint32 end_idx = 24;
    if (has_end_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_idx());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .SemanticInput semantic_request = 51;
    if (has_semantic_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->semantic_request());
    }
    
    // optional uint32 qc_bid = 201 [default = 0];
    if (has_qc_bid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qc_bid());
    }
    
    // optional uint32 max_doc_return = 202 [default = 300];
    if (has_max_doc_return()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_doc_return());
    }
    
    // optional uint32 use_qbc_info = 203 [default = 0];
    if (has_use_qbc_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_qbc_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RBURequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RBURequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RBURequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RBURequest::MergeFrom(const RBURequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_search_id(from.search_id());
    }
    if (from._has_bit(1)) {
      set_client_ip(from.client_ip());
    }
    if (from._has_bit(2)) {
      set_echo(from.echo());
    }
    if (from._has_bit(3)) {
      set_search_query(from.search_query());
    }
    if (from._has_bit(4)) {
      set_page_id(from.page_id());
    }
    if (from._has_bit(5)) {
      set_num_per_page(from.num_per_page());
    }
    if (from._has_bit(6)) {
      set_rank_type(from.rank_type());
    }
    if (from._has_bit(7)) {
      set_debug_flag(from.debug_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_num_filter(from.num_filter());
    }
    if (from._has_bit(9)) {
      set_cl_filter(from.cl_filter());
    }
    if (from._has_bit(10)) {
      set_text_filter(from.text_filter());
    }
    if (from._has_bit(11)) {
      set_docid_filter(from.docid_filter());
    }
    if (from._has_bit(12)) {
      set_extra(from.extra());
    }
    if (from._has_bit(13)) {
      mutable_search_config()->::SearchConfig::MergeFrom(from.search_config());
    }
    if (from._has_bit(14)) {
      set_source_id(from.source_id());
    }
    if (from._has_bit(15)) {
      set_app_id(from.app_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_query_encode(from.query_encode());
    }
    if (from._has_bit(17)) {
      set_indexd_extension(from.indexd_extension());
    }
    if (from._has_bit(18)) {
      set_disable_qc(from.disable_qc());
    }
    if (from._has_bit(19)) {
      set_enable_abs_highlight(from.enable_abs_highlight());
    }
    if (from._has_bit(20)) {
      set_second_search(from.second_search());
    }
    if (from._has_bit(21)) {
      set_sort(from.sort());
    }
    if (from._has_bit(22)) {
      set_start_idx(from.start_idx());
    }
    if (from._has_bit(23)) {
      set_end_idx(from.end_idx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_semantic_request()->::SemanticInput::MergeFrom(from.semantic_request());
    }
    if (from._has_bit(25)) {
      set_qc_bid(from.qc_bid());
    }
    if (from._has_bit(26)) {
      set_max_doc_return(from.max_doc_return());
    }
    if (from._has_bit(27)) {
      set_use_qbc_info(from.use_qbc_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RBURequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RBURequest::CopyFrom(const RBURequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RBURequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000028) != 0x00000028) return false;
  
  return true;
}

void RBURequest::Swap(RBURequest* other) {
  if (other != this) {
    std::swap(search_id_, other->search_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(echo_, other->echo_);
    std::swap(search_query_, other->search_query_);
    std::swap(page_id_, other->page_id_);
    std::swap(num_per_page_, other->num_per_page_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(debug_flag_, other->debug_flag_);
    std::swap(num_filter_, other->num_filter_);
    std::swap(cl_filter_, other->cl_filter_);
    std::swap(text_filter_, other->text_filter_);
    std::swap(docid_filter_, other->docid_filter_);
    std::swap(extra_, other->extra_);
    std::swap(search_config_, other->search_config_);
    std::swap(source_id_, other->source_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(query_encode_, other->query_encode_);
    std::swap(indexd_extension_, other->indexd_extension_);
    std::swap(disable_qc_, other->disable_qc_);
    std::swap(enable_abs_highlight_, other->enable_abs_highlight_);
    std::swap(second_search_, other->second_search_);
    std::swap(sort_, other->sort_);
    std::swap(start_idx_, other->start_idx_);
    std::swap(end_idx_, other->end_idx_);
    std::swap(semantic_request_, other->semantic_request_);
    std::swap(qc_bid_, other->qc_bid_);
    std::swap(max_doc_return_, other->max_doc_return_);
    std::swap(use_qbc_info_, other->use_qbc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RBURequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RBURequest_descriptor_;
  metadata.reflection = RBURequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RBUResponse::_default_retmsg_;
const ::std::string RBUResponse::_default_echo_;
const ::std::string RBUResponse::_default_qrw_result_;
const ::std::string RBUResponse::_default_l4_output_;
#ifndef _MSC_VER
const int RBUResponse::kRetcodeFieldNumber;
const int RBUResponse::kRetmsgFieldNumber;
const int RBUResponse::kEchoFieldNumber;
const int RBUResponse::kResultListFieldNumber;
const int RBUResponse::kResultNumFieldNumber;
const int RBUResponse::kDisplayNumFieldNumber;
const int RBUResponse::kEresultNumFieldNumber;
const int RBUResponse::kCostTimeFieldNumber;
const int RBUResponse::kDebugInfoFieldNumber;
const int RBUResponse::kSegStrListFieldNumber;
const int RBUResponse::kSegIntListFieldNumber;
const int RBUResponse::kQrwResultFieldNumber;
const int RBUResponse::kL4OutputFieldNumber;
const int RBUResponse::kPlatformOutputFieldNumber;
const int RBUResponse::kSemanticResponseFieldNumber;
#endif  // !_MSC_VER

RBUResponse::RBUResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RBUResponse::InitAsDefaultInstance() {
  debug_info_ = const_cast< ::RBUDebugInfo*>(&::RBUDebugInfo::default_instance());
  semantic_response_ = const_cast< ::SemanticOutput*>(&::SemanticOutput::default_instance());
}

RBUResponse::RBUResponse(const RBUResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RBUResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&_default_retmsg_);
  echo_ = const_cast< ::std::string*>(&_default_echo_);
  result_num_ = 0;
  display_num_ = 0;
  eresult_num_ = 0;
  cost_time_ = 0;
  debug_info_ = NULL;
  qrw_result_ = const_cast< ::std::string*>(&_default_qrw_result_);
  l4_output_ = const_cast< ::std::string*>(&_default_l4_output_);
  semantic_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RBUResponse::~RBUResponse() {
  SharedDtor();
}

void RBUResponse::SharedDtor() {
  if (retmsg_ != &_default_retmsg_) {
    delete retmsg_;
  }
  if (echo_ != &_default_echo_) {
    delete echo_;
  }
  if (qrw_result_ != &_default_qrw_result_) {
    delete qrw_result_;
  }
  if (l4_output_ != &_default_l4_output_) {
    delete l4_output_;
  }
  if (this != default_instance_) {
    delete debug_info_;
    delete semantic_response_;
  }
}

void RBUResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RBUResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RBUResponse_descriptor_;
}

const RBUResponse& RBUResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

RBUResponse* RBUResponse::default_instance_ = NULL;

RBUResponse* RBUResponse::New() const {
  return new RBUResponse;
}

void RBUResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (_has_bit(1)) {
      if (retmsg_ != &_default_retmsg_) {
        retmsg_->clear();
      }
    }
    if (_has_bit(2)) {
      if (echo_ != &_default_echo_) {
        echo_->clear();
      }
    }
    result_num_ = 0;
    display_num_ = 0;
    eresult_num_ = 0;
    cost_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (debug_info_ != NULL) debug_info_->::RBUDebugInfo::Clear();
    }
    if (_has_bit(11)) {
      if (qrw_result_ != &_default_qrw_result_) {
        qrw_result_->clear();
      }
    }
    if (_has_bit(12)) {
      if (l4_output_ != &_default_l4_output_) {
        l4_output_->clear();
      }
    }
    if (_has_bit(14)) {
      if (semantic_response_ != NULL) semantic_response_->::SemanticOutput::Clear();
    }
  }
  result_list_.Clear();
  seg_str_list_.Clear();
  seg_int_list_.Clear();
  platform_output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RBUResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }
      
      // optional bytes retmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_retmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_echo;
        break;
      }
      
      // optional bytes echo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_list;
        break;
      }
      
      // repeated .RBUDocItem result_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_list;
        if (input->ExpectTag(40)) goto parse_result_num;
        break;
      }
      
      // required int32 result_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_num_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_display_num;
        break;
      }
      
      // required int32 display_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_num_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eresult_num;
        break;
      }
      
      // required int32 eresult_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_num_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cost_time;
        break;
      }
      
      // optional int32 cost_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_time_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_debug_info;
        break;
      }
      
      // optional .RBUDebugInfo debug_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_seg_str_list;
        break;
      }
      
      // repeated bytes seg_str_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seg_str_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_seg_str_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_seg_str_list;
        if (input->ExpectTag(88)) goto parse_seg_int_list;
        break;
      }
      
      // repeated uint64 seg_int_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seg_int_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 88, input, this->mutable_seg_int_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_seg_int_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_seg_int_list;
        if (input->ExpectTag(98)) goto parse_qrw_result;
        break;
      }
      
      // optional bytes qrw_result = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qrw_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_l4_output;
        break;
      }
      
      // optional bytes l4_output = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l4_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l4_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_platform_output;
        break;
      }
      
      // repeated .PlatformOutItem platform_output = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_platform_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_platform_output;
        if (input->ExpectTag(410)) goto parse_semantic_response;
        break;
      }
      
      // optional .SemanticOutput semantic_response = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_semantic_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_semantic_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RBUResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }
  
  // optional bytes retmsg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->retmsg(), output);
  }
  
  // optional bytes echo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->echo(), output);
  }
  
  // repeated .RBUDocItem result_list = 4;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_list(i), output);
  }
  
  // required int32 result_num = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result_num(), output);
  }
  
  // required int32 display_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display_num(), output);
  }
  
  // required int32 eresult_num = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->eresult_num(), output);
  }
  
  // optional int32 cost_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cost_time(), output);
  }
  
  // optional .RBUDebugInfo debug_info = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->debug_info(), output);
  }
  
  // repeated bytes seg_str_list = 10;
  for (int i = 0; i < this->seg_str_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->seg_str_list(i), output);
  }
  
  // repeated uint64 seg_int_list = 11;
  for (int i = 0; i < this->seg_int_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      11, this->seg_int_list(i), output);
  }
  
  // optional bytes qrw_result = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->qrw_result(), output);
  }
  
  // optional bytes l4_output = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->l4_output(), output);
  }
  
  // repeated .PlatformOutItem platform_output = 14;
  for (int i = 0; i < this->platform_output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->platform_output(i), output);
  }
  
  // optional .SemanticOutput semantic_response = 51;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->semantic_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RBUResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }
  
  // optional bytes retmsg = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->retmsg(), target);
  }
  
  // optional bytes echo = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->echo(), target);
  }
  
  // repeated .RBUDocItem result_list = 4;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result_list(i), target);
  }
  
  // required int32 result_num = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result_num(), target);
  }
  
  // required int32 display_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display_num(), target);
  }
  
  // required int32 eresult_num = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->eresult_num(), target);
  }
  
  // optional int32 cost_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cost_time(), target);
  }
  
  // optional .RBUDebugInfo debug_info = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->debug_info(), target);
  }
  
  // repeated bytes seg_str_list = 10;
  for (int i = 0; i < this->seg_str_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->seg_str_list(i), target);
  }
  
  // repeated uint64 seg_int_list = 11;
  for (int i = 0; i < this->seg_int_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(11, this->seg_int_list(i), target);
  }
  
  // optional bytes qrw_result = 12;
  if (_has_bit(11)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->qrw_result(), target);
  }
  
  // optional bytes l4_output = 13;
  if (_has_bit(12)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->l4_output(), target);
  }
  
  // repeated .PlatformOutItem platform_output = 14;
  for (int i = 0; i < this->platform_output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->platform_output(i), target);
  }
  
  // optional .SemanticOutput semantic_response = 51;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->semantic_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RBUResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }
    
    // optional bytes retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->retmsg());
    }
    
    // optional bytes echo = 3;
    if (has_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echo());
    }
    
    // required int32 result_num = 5;
    if (has_result_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_num());
    }
    
    // required int32 display_num = 6;
    if (has_display_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_num());
    }
    
    // required int32 eresult_num = 7;
    if (has_eresult_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_num());
    }
    
    // optional int32 cost_time = 8;
    if (has_cost_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .RBUDebugInfo debug_info = 9;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_info());
    }
    
    // optional bytes qrw_result = 12;
    if (has_qrw_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qrw_result());
    }
    
    // optional bytes l4_output = 13;
    if (has_l4_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->l4_output());
    }
    
    // optional .SemanticOutput semantic_response = 51;
    if (has_semantic_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->semantic_response());
    }
    
  }
  // repeated .RBUDocItem result_list = 4;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }
  
  // repeated bytes seg_str_list = 10;
  total_size += 1 * this->seg_str_list_size();
  for (int i = 0; i < this->seg_str_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->seg_str_list(i));
  }
  
  // repeated uint64 seg_int_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->seg_int_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->seg_int_list(i));
    }
    total_size += 1 * this->seg_int_list_size() + data_size;
  }
  
  // repeated .PlatformOutItem platform_output = 14;
  total_size += 1 * this->platform_output_size();
  for (int i = 0; i < this->platform_output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform_output(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RBUResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RBUResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RBUResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RBUResponse::MergeFrom(const RBUResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  seg_str_list_.MergeFrom(from.seg_str_list_);
  seg_int_list_.MergeFrom(from.seg_int_list_);
  platform_output_.MergeFrom(from.platform_output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_retcode(from.retcode());
    }
    if (from._has_bit(1)) {
      set_retmsg(from.retmsg());
    }
    if (from._has_bit(2)) {
      set_echo(from.echo());
    }
    if (from._has_bit(4)) {
      set_result_num(from.result_num());
    }
    if (from._has_bit(5)) {
      set_display_num(from.display_num());
    }
    if (from._has_bit(6)) {
      set_eresult_num(from.eresult_num());
    }
    if (from._has_bit(7)) {
      set_cost_time(from.cost_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_debug_info()->::RBUDebugInfo::MergeFrom(from.debug_info());
    }
    if (from._has_bit(11)) {
      set_qrw_result(from.qrw_result());
    }
    if (from._has_bit(12)) {
      set_l4_output(from.l4_output());
    }
    if (from._has_bit(14)) {
      mutable_semantic_response()->::SemanticOutput::MergeFrom(from.semantic_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RBUResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RBUResponse::CopyFrom(const RBUResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RBUResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000071) != 0x00000071) return false;
  
  return true;
}

void RBUResponse::Swap(RBUResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(echo_, other->echo_);
    result_list_.Swap(&other->result_list_);
    std::swap(result_num_, other->result_num_);
    std::swap(display_num_, other->display_num_);
    std::swap(eresult_num_, other->eresult_num_);
    std::swap(cost_time_, other->cost_time_);
    std::swap(debug_info_, other->debug_info_);
    seg_str_list_.Swap(&other->seg_str_list_);
    seg_int_list_.Swap(&other->seg_int_list_);
    std::swap(qrw_result_, other->qrw_result_);
    std::swap(l4_output_, other->l4_output_);
    platform_output_.Swap(&other->platform_output_);
    std::swap(semantic_response_, other->semantic_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RBUResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RBUResponse_descriptor_;
  metadata.reflection = RBUResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PlatformOutItem::_default_platform_output_;
#ifndef _MSC_VER
const int PlatformOutItem::kQrwItemIdxFieldNumber;
const int PlatformOutItem::kPlatformOutputFieldNumber;
#endif  // !_MSC_VER

PlatformOutItem::PlatformOutItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlatformOutItem::InitAsDefaultInstance() {
}

PlatformOutItem::PlatformOutItem(const PlatformOutItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlatformOutItem::SharedCtor() {
  _cached_size_ = 0;
  qrw_item_idx_ = 0;
  platform_output_ = const_cast< ::std::string*>(&_default_platform_output_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatformOutItem::~PlatformOutItem() {
  SharedDtor();
}

void PlatformOutItem::SharedDtor() {
  if (platform_output_ != &_default_platform_output_) {
    delete platform_output_;
  }
  if (this != default_instance_) {
  }
}

void PlatformOutItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatformOutItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformOutItem_descriptor_;
}

const PlatformOutItem& PlatformOutItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

PlatformOutItem* PlatformOutItem::default_instance_ = NULL;

PlatformOutItem* PlatformOutItem::New() const {
  return new PlatformOutItem;
}

void PlatformOutItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qrw_item_idx_ = 0;
    if (_has_bit(1)) {
      if (platform_output_ != &_default_platform_output_) {
        platform_output_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatformOutItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 qrw_item_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrw_item_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform_output;
        break;
      }
      
      // optional bytes platform_output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlatformOutItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 qrw_item_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->qrw_item_idx(), output);
  }
  
  // optional bytes platform_output = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->platform_output(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlatformOutItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 qrw_item_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->qrw_item_idx(), target);
  }
  
  // optional bytes platform_output = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->platform_output(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlatformOutItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 qrw_item_idx = 1;
    if (has_qrw_item_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrw_item_idx());
    }
    
    // optional bytes platform_output = 2;
    if (has_platform_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_output());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatformOutItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatformOutItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatformOutItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatformOutItem::MergeFrom(const PlatformOutItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_qrw_item_idx(from.qrw_item_idx());
    }
    if (from._has_bit(1)) {
      set_platform_output(from.platform_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatformOutItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformOutItem::CopyFrom(const PlatformOutItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformOutItem::IsInitialized() const {
  
  return true;
}

void PlatformOutItem::Swap(PlatformOutItem* other) {
  if (other != this) {
    std::swap(qrw_item_idx_, other->qrw_item_idx_);
    std::swap(platform_output_, other->platform_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatformOutItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatformOutItem_descriptor_;
  metadata.reflection = PlatformOutItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SemanticInput::kSemanticPageIdFieldNumber;
const int SemanticInput::kSemanticNumPerPageFieldNumber;
const int SemanticInput::kSemanticStartIdxFieldNumber;
const int SemanticInput::kSemanticEndIdxFieldNumber;
const int SemanticInput::kSemanticReqTypeFieldNumber;
#endif  // !_MSC_VER

SemanticInput::SemanticInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SemanticInput::InitAsDefaultInstance() {
}

SemanticInput::SemanticInput(const SemanticInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SemanticInput::SharedCtor() {
  _cached_size_ = 0;
  semantic_page_id_ = 0u;
  semantic_num_per_page_ = 0u;
  semantic_start_idx_ = 0u;
  semantic_end_idx_ = 0u;
  semantic_req_type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SemanticInput::~SemanticInput() {
  SharedDtor();
}

void SemanticInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SemanticInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SemanticInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemanticInput_descriptor_;
}

const SemanticInput& SemanticInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

SemanticInput* SemanticInput::default_instance_ = NULL;

SemanticInput* SemanticInput::New() const {
  return new SemanticInput;
}

void SemanticInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    semantic_page_id_ = 0u;
    semantic_num_per_page_ = 0u;
    semantic_start_idx_ = 0u;
    semantic_end_idx_ = 0u;
    semantic_req_type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SemanticInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 semantic_page_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semantic_page_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_semantic_num_per_page;
        break;
      }
      
      // optional uint32 semantic_num_per_page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_num_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semantic_num_per_page_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_semantic_start_idx;
        break;
      }
      
      // optional uint32 semantic_start_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_start_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semantic_start_idx_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_semantic_end_idx;
        break;
      }
      
      // optional uint32 semantic_end_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_end_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semantic_end_idx_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_semantic_req_type;
        break;
      }
      
      // optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_req_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SemanticReqType_IsValid(value)) {
            set_semantic_req_type(static_cast< SemanticReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SemanticInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 semantic_page_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->semantic_page_id(), output);
  }
  
  // optional uint32 semantic_num_per_page = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->semantic_num_per_page(), output);
  }
  
  // optional uint32 semantic_start_idx = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->semantic_start_idx(), output);
  }
  
  // optional uint32 semantic_end_idx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->semantic_end_idx(), output);
  }
  
  // optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->semantic_req_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SemanticInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 semantic_page_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->semantic_page_id(), target);
  }
  
  // optional uint32 semantic_num_per_page = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->semantic_num_per_page(), target);
  }
  
  // optional uint32 semantic_start_idx = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->semantic_start_idx(), target);
  }
  
  // optional uint32 semantic_end_idx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->semantic_end_idx(), target);
  }
  
  // optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->semantic_req_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SemanticInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 semantic_page_id = 1;
    if (has_semantic_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semantic_page_id());
    }
    
    // optional uint32 semantic_num_per_page = 2;
    if (has_semantic_num_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semantic_num_per_page());
    }
    
    // optional uint32 semantic_start_idx = 3;
    if (has_semantic_start_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semantic_start_idx());
    }
    
    // optional uint32 semantic_end_idx = 4;
    if (has_semantic_end_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semantic_end_idx());
    }
    
    // optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
    if (has_semantic_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantic_req_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SemanticInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SemanticInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SemanticInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SemanticInput::MergeFrom(const SemanticInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_semantic_page_id(from.semantic_page_id());
    }
    if (from._has_bit(1)) {
      set_semantic_num_per_page(from.semantic_num_per_page());
    }
    if (from._has_bit(2)) {
      set_semantic_start_idx(from.semantic_start_idx());
    }
    if (from._has_bit(3)) {
      set_semantic_end_idx(from.semantic_end_idx());
    }
    if (from._has_bit(4)) {
      set_semantic_req_type(from.semantic_req_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SemanticInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticInput::CopyFrom(const SemanticInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticInput::IsInitialized() const {
  
  return true;
}

void SemanticInput::Swap(SemanticInput* other) {
  if (other != this) {
    std::swap(semantic_page_id_, other->semantic_page_id_);
    std::swap(semantic_num_per_page_, other->semantic_num_per_page_);
    std::swap(semantic_start_idx_, other->semantic_start_idx_);
    std::swap(semantic_end_idx_, other->semantic_end_idx_);
    std::swap(semantic_req_type_, other->semantic_req_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SemanticInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SemanticInput_descriptor_;
  metadata.reflection = SemanticInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SemanticOutput::kSemanticResultListFieldNumber;
const int SemanticOutput::kSemanticResultNumFieldNumber;
const int SemanticOutput::kSemanticDisplayNumFieldNumber;
const int SemanticOutput::kSemanticEresultNumFieldNumber;
#endif  // !_MSC_VER

SemanticOutput::SemanticOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SemanticOutput::InitAsDefaultInstance() {
}

SemanticOutput::SemanticOutput(const SemanticOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SemanticOutput::SharedCtor() {
  _cached_size_ = 0;
  semantic_result_num_ = 0;
  semantic_display_num_ = 0;
  semantic_eresult_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SemanticOutput::~SemanticOutput() {
  SharedDtor();
}

void SemanticOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SemanticOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SemanticOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemanticOutput_descriptor_;
}

const SemanticOutput& SemanticOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_business_5finterface_2eproto();  return *default_instance_;
}

SemanticOutput* SemanticOutput::default_instance_ = NULL;

SemanticOutput* SemanticOutput::New() const {
  return new SemanticOutput;
}

void SemanticOutput::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    semantic_result_num_ = 0;
    semantic_display_num_ = 0;
    semantic_eresult_num_ = 0;
  }
  semantic_result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SemanticOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RBUDocItem semantic_result_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_semantic_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_semantic_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_semantic_result_list;
        if (input->ExpectTag(16)) goto parse_semantic_result_num;
        break;
      }
      
      // optional int32 semantic_result_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_result_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &semantic_result_num_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_semantic_display_num;
        break;
      }
      
      // optional int32 semantic_display_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_display_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &semantic_display_num_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_semantic_eresult_num;
        break;
      }
      
      // optional int32 semantic_eresult_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_semantic_eresult_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &semantic_eresult_num_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SemanticOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RBUDocItem semantic_result_list = 1;
  for (int i = 0; i < this->semantic_result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->semantic_result_list(i), output);
  }
  
  // optional int32 semantic_result_num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->semantic_result_num(), output);
  }
  
  // optional int32 semantic_display_num = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->semantic_display_num(), output);
  }
  
  // optional int32 semantic_eresult_num = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->semantic_eresult_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SemanticOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RBUDocItem semantic_result_list = 1;
  for (int i = 0; i < this->semantic_result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->semantic_result_list(i), target);
  }
  
  // optional int32 semantic_result_num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->semantic_result_num(), target);
  }
  
  // optional int32 semantic_display_num = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->semantic_display_num(), target);
  }
  
  // optional int32 semantic_eresult_num = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->semantic_eresult_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SemanticOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 semantic_result_num = 2;
    if (has_semantic_result_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->semantic_result_num());
    }
    
    // optional int32 semantic_display_num = 3;
    if (has_semantic_display_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->semantic_display_num());
    }
    
    // optional int32 semantic_eresult_num = 4;
    if (has_semantic_eresult_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->semantic_eresult_num());
    }
    
  }
  // repeated .RBUDocItem semantic_result_list = 1;
  total_size += 1 * this->semantic_result_list_size();
  for (int i = 0; i < this->semantic_result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->semantic_result_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SemanticOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SemanticOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SemanticOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SemanticOutput::MergeFrom(const SemanticOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  semantic_result_list_.MergeFrom(from.semantic_result_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_semantic_result_num(from.semantic_result_num());
    }
    if (from._has_bit(2)) {
      set_semantic_display_num(from.semantic_display_num());
    }
    if (from._has_bit(3)) {
      set_semantic_eresult_num(from.semantic_eresult_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SemanticOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticOutput::CopyFrom(const SemanticOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticOutput::IsInitialized() const {
  
  return true;
}

void SemanticOutput::Swap(SemanticOutput* other) {
  if (other != this) {
    semantic_result_list_.Swap(&other->semantic_result_list_);
    std::swap(semantic_result_num_, other->semantic_result_num_);
    std::swap(semantic_display_num_, other->semantic_display_num_);
    std::swap(semantic_eresult_num_, other->semantic_eresult_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SemanticOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SemanticOutput_descriptor_;
  metadata.reflection = SemanticOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
