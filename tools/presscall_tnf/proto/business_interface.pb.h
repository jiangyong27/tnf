// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business_interface.proto

#ifndef PROTOBUF_business_5finterface_2eproto__INCLUDED
#define PROTOBUF_business_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_business_5finterface_2eproto();
void protobuf_AssignDesc_business_5finterface_2eproto();
void protobuf_ShutdownFile_business_5finterface_2eproto();

class RBUDocItem;
class SearchConfig;
class RBUDebugInfo;
class RBURequest;
class RBUResponse;
class PlatformOutItem;
class SemanticInput;
class SemanticOutput;

enum SemanticReqType {
  NORMAL_SEMANTIC_REQ = 1,
  NORMAL_ONLY_REQ = 2,
  SEMANTIC_ONLY_REQ = 3
};
bool SemanticReqType_IsValid(int value);
const SemanticReqType SemanticReqType_MIN = NORMAL_SEMANTIC_REQ;
const SemanticReqType SemanticReqType_MAX = SEMANTIC_ONLY_REQ;
const int SemanticReqType_ARRAYSIZE = SemanticReqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SemanticReqType_descriptor();
inline const ::std::string& SemanticReqType_Name(SemanticReqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SemanticReqType_descriptor(), value);
}
inline bool SemanticReqType_Parse(
    const ::std::string& name, SemanticReqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SemanticReqType>(
    SemanticReqType_descriptor(), name, value);
}
// ===================================================================

class RBUDocItem : public ::google::protobuf::Message {
 public:
  RBUDocItem();
  virtual ~RBUDocItem();
  
  RBUDocItem(const RBUDocItem& from);
  
  inline RBUDocItem& operator=(const RBUDocItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RBUDocItem& default_instance();
  
  void Swap(RBUDocItem* other);
  
  // implements Message ----------------------------------------------
  
  RBUDocItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RBUDocItem& from);
  void MergeFrom(const RBUDocItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 docid = 1;
  inline bool has_docid() const;
  inline void clear_docid();
  static const int kDocidFieldNumber = 1;
  inline ::google::protobuf::uint64 docid() const;
  inline void set_docid(::google::protobuf::uint64 value);
  
  // optional uint64 inner_docid = 2;
  inline bool has_inner_docid() const;
  inline void clear_inner_docid();
  static const int kInnerDocidFieldNumber = 2;
  inline ::google::protobuf::uint64 inner_docid() const;
  inline void set_inner_docid(::google::protobuf::uint64 value);
  
  // optional bytes doc_meta = 3;
  inline bool has_doc_meta() const;
  inline void clear_doc_meta();
  static const int kDocMetaFieldNumber = 3;
  inline const ::std::string& doc_meta() const;
  inline void set_doc_meta(const ::std::string& value);
  inline void set_doc_meta(const char* value);
  inline void set_doc_meta(const void* value, size_t size);
  inline ::std::string* mutable_doc_meta();
  
  // optional bytes search_debug_info = 4;
  inline bool has_search_debug_info() const;
  inline void clear_search_debug_info();
  static const int kSearchDebugInfoFieldNumber = 4;
  inline const ::std::string& search_debug_info() const;
  inline void set_search_debug_info(const ::std::string& value);
  inline void set_search_debug_info(const char* value);
  inline void set_search_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_search_debug_info();
  
  // optional bytes rela_debug_info = 5;
  inline bool has_rela_debug_info() const;
  inline void clear_rela_debug_info();
  static const int kRelaDebugInfoFieldNumber = 5;
  inline const ::std::string& rela_debug_info() const;
  inline void set_rela_debug_info(const ::std::string& value);
  inline void set_rela_debug_info(const char* value);
  inline void set_rela_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_rela_debug_info();
  
  // optional bytes merge_debug_info = 6;
  inline bool has_merge_debug_info() const;
  inline void clear_merge_debug_info();
  static const int kMergeDebugInfoFieldNumber = 6;
  inline const ::std::string& merge_debug_info() const;
  inline void set_merge_debug_info(const ::std::string& value);
  inline void set_merge_debug_info(const char* value);
  inline void set_merge_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_merge_debug_info();
  
  // optional float l0_score = 7;
  inline bool has_l0_score() const;
  inline void clear_l0_score();
  static const int kL0ScoreFieldNumber = 7;
  inline float l0_score() const;
  inline void set_l0_score(float value);
  
  // optional float l1_score = 8;
  inline bool has_l1_score() const;
  inline void clear_l1_score();
  static const int kL1ScoreFieldNumber = 8;
  inline float l1_score() const;
  inline void set_l1_score(float value);
  
  // optional float l2_score = 9;
  inline bool has_l2_score() const;
  inline void clear_l2_score();
  static const int kL2ScoreFieldNumber = 9;
  inline float l2_score() const;
  inline void set_l2_score(float value);
  
  // optional bytes raw_abs = 10;
  inline bool has_raw_abs() const;
  inline void clear_raw_abs();
  static const int kRawAbsFieldNumber = 10;
  inline const ::std::string& raw_abs() const;
  inline void set_raw_abs(const ::std::string& value);
  inline void set_raw_abs(const char* value);
  inline void set_raw_abs(const void* value, size_t size);
  inline ::std::string* mutable_raw_abs();
  
  // optional int32 qrw_idx = 11;
  inline bool has_qrw_idx() const;
  inline void clear_qrw_idx();
  static const int kQrwIdxFieldNumber = 11;
  inline ::google::protobuf::int32 qrw_idx() const;
  inline void set_qrw_idx(::google::protobuf::int32 value);
  
  // optional int32 xob_mask = 12;
  inline bool has_xob_mask() const;
  inline void clear_xob_mask();
  static const int kXobMaskFieldNumber = 12;
  inline ::google::protobuf::int32 xob_mask() const;
  inline void set_xob_mask(::google::protobuf::int32 value);
  
  // optional bytes su_docitem = 13;
  inline bool has_su_docitem() const;
  inline void clear_su_docitem();
  static const int kSuDocitemFieldNumber = 13;
  inline const ::std::string& su_docitem() const;
  inline void set_su_docitem(const ::std::string& value);
  inline void set_su_docitem(const char* value);
  inline void set_su_docitem(const void* value, size_t size);
  inline ::std::string* mutable_su_docitem();
  
  // optional bytes l4_output = 14;
  inline bool has_l4_output() const;
  inline void clear_l4_output();
  static const int kL4OutputFieldNumber = 14;
  inline const ::std::string& l4_output() const;
  inline void set_l4_output(const ::std::string& value);
  inline void set_l4_output(const char* value);
  inline void set_l4_output(const void* value, size_t size);
  inline ::std::string* mutable_l4_output();
  
  // optional bytes platform_output = 15;
  inline bool has_platform_output() const;
  inline void clear_platform_output();
  static const int kPlatformOutputFieldNumber = 15;
  inline const ::std::string& platform_output() const;
  inline void set_platform_output(const ::std::string& value);
  inline void set_platform_output(const char* value);
  inline void set_platform_output(const void* value, size_t size);
  inline ::std::string* mutable_platform_output();
  
  // optional bytes qbc_info = 201;
  inline bool has_qbc_info() const;
  inline void clear_qbc_info();
  static const int kQbcInfoFieldNumber = 201;
  inline const ::std::string& qbc_info() const;
  inline void set_qbc_info(const ::std::string& value);
  inline void set_qbc_info(const char* value);
  inline void set_qbc_info(const void* value, size_t size);
  inline ::std::string* mutable_qbc_info();
  
  // @@protoc_insertion_point(class_scope:RBUDocItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 docid_;
  ::google::protobuf::uint64 inner_docid_;
  ::std::string* doc_meta_;
  static const ::std::string _default_doc_meta_;
  ::std::string* search_debug_info_;
  static const ::std::string _default_search_debug_info_;
  ::std::string* rela_debug_info_;
  static const ::std::string _default_rela_debug_info_;
  ::std::string* merge_debug_info_;
  static const ::std::string _default_merge_debug_info_;
  float l0_score_;
  float l1_score_;
  float l2_score_;
  ::std::string* raw_abs_;
  static const ::std::string _default_raw_abs_;
  ::google::protobuf::int32 qrw_idx_;
  ::google::protobuf::int32 xob_mask_;
  ::std::string* su_docitem_;
  static const ::std::string _default_su_docitem_;
  ::std::string* l4_output_;
  static const ::std::string _default_l4_output_;
  ::std::string* platform_output_;
  static const ::std::string _default_platform_output_;
  ::std::string* qbc_info_;
  static const ::std::string _default_qbc_info_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RBUDocItem* default_instance_;
};
// -------------------------------------------------------------------

class SearchConfig : public ::google::protobuf::Message {
 public:
  SearchConfig();
  virtual ~SearchConfig();
  
  SearchConfig(const SearchConfig& from);
  
  inline SearchConfig& operator=(const SearchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchConfig& default_instance();
  
  void Swap(SearchConfig* other);
  
  // implements Message ----------------------------------------------
  
  SearchConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchConfig& from);
  void MergeFrom(const SearchConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 debug_info_level = 1;
  inline bool has_debug_info_level() const;
  inline void clear_debug_info_level();
  static const int kDebugInfoLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 debug_info_level() const;
  inline void set_debug_info_level(::google::protobuf::uint32 value);
  
  // optional uint64 xob_mask = 2;
  inline bool has_xob_mask() const;
  inline void clear_xob_mask();
  static const int kXobMaskFieldNumber = 2;
  inline ::google::protobuf::uint64 xob_mask() const;
  inline void set_xob_mask(::google::protobuf::uint64 value);
  
  // optional bytes whiteboard_qrw = 4;
  inline bool has_whiteboard_qrw() const;
  inline void clear_whiteboard_qrw();
  static const int kWhiteboardQrwFieldNumber = 4;
  inline const ::std::string& whiteboard_qrw() const;
  inline void set_whiteboard_qrw(const ::std::string& value);
  inline void set_whiteboard_qrw(const char* value);
  inline void set_whiteboard_qrw(const void* value, size_t size);
  inline ::std::string* mutable_whiteboard_qrw();
  
  // optional bytes qrw_ip = 5;
  inline bool has_qrw_ip() const;
  inline void clear_qrw_ip();
  static const int kQrwIpFieldNumber = 5;
  inline const ::std::string& qrw_ip() const;
  inline void set_qrw_ip(const ::std::string& value);
  inline void set_qrw_ip(const char* value);
  inline void set_qrw_ip(const void* value, size_t size);
  inline ::std::string* mutable_qrw_ip();
  
  // optional int32 qrw_port = 6;
  inline bool has_qrw_port() const;
  inline void clear_qrw_port();
  static const int kQrwPortFieldNumber = 6;
  inline ::google::protobuf::int32 qrw_port() const;
  inline void set_qrw_port(::google::protobuf::int32 value);
  
  // optional bytes dignose_queryd_req_info = 7;
  inline bool has_dignose_queryd_req_info() const;
  inline void clear_dignose_queryd_req_info();
  static const int kDignoseQuerydReqInfoFieldNumber = 7;
  inline const ::std::string& dignose_queryd_req_info() const;
  inline void set_dignose_queryd_req_info(const ::std::string& value);
  inline void set_dignose_queryd_req_info(const char* value);
  inline void set_dignose_queryd_req_info(const void* value, size_t size);
  inline ::std::string* mutable_dignose_queryd_req_info();
  
  // optional bytes dignose_abs_req_info = 8;
  inline bool has_dignose_abs_req_info() const;
  inline void clear_dignose_abs_req_info();
  static const int kDignoseAbsReqInfoFieldNumber = 8;
  inline const ::std::string& dignose_abs_req_info() const;
  inline void set_dignose_abs_req_info(const ::std::string& value);
  inline void set_dignose_abs_req_info(const char* value);
  inline void set_dignose_abs_req_info(const void* value, size_t size);
  inline ::std::string* mutable_dignose_abs_req_info();
  
  // optional uint32 whiteboard_debug_flag = 9;
  inline bool has_whiteboard_debug_flag() const;
  inline void clear_whiteboard_debug_flag();
  static const int kWhiteboardDebugFlagFieldNumber = 9;
  inline ::google::protobuf::uint32 whiteboard_debug_flag() const;
  inline void set_whiteboard_debug_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SearchConfig)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 debug_info_level_;
  ::google::protobuf::uint64 xob_mask_;
  ::std::string* whiteboard_qrw_;
  static const ::std::string _default_whiteboard_qrw_;
  ::std::string* qrw_ip_;
  static const ::std::string _default_qrw_ip_;
  ::google::protobuf::int32 qrw_port_;
  ::std::string* dignose_queryd_req_info_;
  static const ::std::string _default_dignose_queryd_req_info_;
  ::std::string* dignose_abs_req_info_;
  static const ::std::string _default_dignose_abs_req_info_;
  ::google::protobuf::uint32 whiteboard_debug_flag_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchConfig* default_instance_;
};
// -------------------------------------------------------------------

class RBUDebugInfo : public ::google::protobuf::Message {
 public:
  RBUDebugInfo();
  virtual ~RBUDebugInfo();
  
  RBUDebugInfo(const RBUDebugInfo& from);
  
  inline RBUDebugInfo& operator=(const RBUDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RBUDebugInfo& default_instance();
  
  void Swap(RBUDebugInfo* other);
  
  // implements Message ----------------------------------------------
  
  RBUDebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RBUDebugInfo& from);
  void MergeFrom(const RBUDebugInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes qrw_debug_info = 1;
  inline bool has_qrw_debug_info() const;
  inline void clear_qrw_debug_info();
  static const int kQrwDebugInfoFieldNumber = 1;
  inline const ::std::string& qrw_debug_info() const;
  inline void set_qrw_debug_info(const ::std::string& value);
  inline void set_qrw_debug_info(const char* value);
  inline void set_qrw_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_qrw_debug_info();
  
  // optional bytes queryd_debug_info = 2;
  inline bool has_queryd_debug_info() const;
  inline void clear_queryd_debug_info();
  static const int kQuerydDebugInfoFieldNumber = 2;
  inline const ::std::string& queryd_debug_info() const;
  inline void set_queryd_debug_info(const ::std::string& value);
  inline void set_queryd_debug_info(const char* value);
  inline void set_queryd_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_queryd_debug_info();
  
  // optional bytes rbu_debug_info = 3;
  inline bool has_rbu_debug_info() const;
  inline void clear_rbu_debug_info();
  static const int kRbuDebugInfoFieldNumber = 3;
  inline const ::std::string& rbu_debug_info() const;
  inline void set_rbu_debug_info(const ::std::string& value);
  inline void set_rbu_debug_info(const char* value);
  inline void set_rbu_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_rbu_debug_info();
  
  // optional bytes indexd_debug_info = 5;
  inline bool has_indexd_debug_info() const;
  inline void clear_indexd_debug_info();
  static const int kIndexdDebugInfoFieldNumber = 5;
  inline const ::std::string& indexd_debug_info() const;
  inline void set_indexd_debug_info(const ::std::string& value);
  inline void set_indexd_debug_info(const char* value);
  inline void set_indexd_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_indexd_debug_info();
  
  // optional bytes dignose_queryd_rsp_info = 6;
  inline bool has_dignose_queryd_rsp_info() const;
  inline void clear_dignose_queryd_rsp_info();
  static const int kDignoseQuerydRspInfoFieldNumber = 6;
  inline const ::std::string& dignose_queryd_rsp_info() const;
  inline void set_dignose_queryd_rsp_info(const ::std::string& value);
  inline void set_dignose_queryd_rsp_info(const char* value);
  inline void set_dignose_queryd_rsp_info(const void* value, size_t size);
  inline ::std::string* mutable_dignose_queryd_rsp_info();
  
  // optional bytes dignose_abs_rsp_info = 7;
  inline bool has_dignose_abs_rsp_info() const;
  inline void clear_dignose_abs_rsp_info();
  static const int kDignoseAbsRspInfoFieldNumber = 7;
  inline const ::std::string& dignose_abs_rsp_info() const;
  inline void set_dignose_abs_rsp_info(const ::std::string& value);
  inline void set_dignose_abs_rsp_info(const char* value);
  inline void set_dignose_abs_rsp_info(const void* value, size_t size);
  inline ::std::string* mutable_dignose_abs_rsp_info();
  
  // optional bytes common_iv_debug_flag = 8;
  inline bool has_common_iv_debug_flag() const;
  inline void clear_common_iv_debug_flag();
  static const int kCommonIvDebugFlagFieldNumber = 8;
  inline const ::std::string& common_iv_debug_flag() const;
  inline void set_common_iv_debug_flag(const ::std::string& value);
  inline void set_common_iv_debug_flag(const char* value);
  inline void set_common_iv_debug_flag(const void* value, size_t size);
  inline ::std::string* mutable_common_iv_debug_flag();
  
  // @@protoc_insertion_point(class_scope:RBUDebugInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* qrw_debug_info_;
  static const ::std::string _default_qrw_debug_info_;
  ::std::string* queryd_debug_info_;
  static const ::std::string _default_queryd_debug_info_;
  ::std::string* rbu_debug_info_;
  static const ::std::string _default_rbu_debug_info_;
  ::std::string* indexd_debug_info_;
  static const ::std::string _default_indexd_debug_info_;
  ::std::string* dignose_queryd_rsp_info_;
  static const ::std::string _default_dignose_queryd_rsp_info_;
  ::std::string* dignose_abs_rsp_info_;
  static const ::std::string _default_dignose_abs_rsp_info_;
  ::std::string* common_iv_debug_flag_;
  static const ::std::string _default_common_iv_debug_flag_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RBUDebugInfo* default_instance_;
};
// -------------------------------------------------------------------

class RBURequest : public ::google::protobuf::Message {
 public:
  RBURequest();
  virtual ~RBURequest();
  
  RBURequest(const RBURequest& from);
  
  inline RBURequest& operator=(const RBURequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RBURequest& default_instance();
  
  void Swap(RBURequest* other);
  
  // implements Message ----------------------------------------------
  
  RBURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RBURequest& from);
  void MergeFrom(const RBURequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes search_id = 1;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 1;
  inline const ::std::string& search_id() const;
  inline void set_search_id(const ::std::string& value);
  inline void set_search_id(const char* value);
  inline void set_search_id(const void* value, size_t size);
  inline ::std::string* mutable_search_id();
  
  // optional uint32 client_ip = 2;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 2;
  inline ::google::protobuf::uint32 client_ip() const;
  inline void set_client_ip(::google::protobuf::uint32 value);
  
  // optional bytes echo = 3;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 3;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const void* value, size_t size);
  inline ::std::string* mutable_echo();
  
  // required bytes search_query = 4;
  inline bool has_search_query() const;
  inline void clear_search_query();
  static const int kSearchQueryFieldNumber = 4;
  inline const ::std::string& search_query() const;
  inline void set_search_query(const ::std::string& value);
  inline void set_search_query(const char* value);
  inline void set_search_query(const void* value, size_t size);
  inline ::std::string* mutable_search_query();
  
  // optional uint32 page_id = 5 [default = 0];
  inline bool has_page_id() const;
  inline void clear_page_id();
  static const int kPageIdFieldNumber = 5;
  inline ::google::protobuf::uint32 page_id() const;
  inline void set_page_id(::google::protobuf::uint32 value);
  
  // required uint32 num_per_page = 6;
  inline bool has_num_per_page() const;
  inline void clear_num_per_page();
  static const int kNumPerPageFieldNumber = 6;
  inline ::google::protobuf::uint32 num_per_page() const;
  inline void set_num_per_page(::google::protobuf::uint32 value);
  
  // optional uint32 rank_type = 7 [default = 0];
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);
  
  // optional uint32 debug_flag = 8 [default = 0];
  inline bool has_debug_flag() const;
  inline void clear_debug_flag();
  static const int kDebugFlagFieldNumber = 8;
  inline ::google::protobuf::uint32 debug_flag() const;
  inline void set_debug_flag(::google::protobuf::uint32 value);
  
  // optional bytes num_filter = 9;
  inline bool has_num_filter() const;
  inline void clear_num_filter();
  static const int kNumFilterFieldNumber = 9;
  inline const ::std::string& num_filter() const;
  inline void set_num_filter(const ::std::string& value);
  inline void set_num_filter(const char* value);
  inline void set_num_filter(const void* value, size_t size);
  inline ::std::string* mutable_num_filter();
  
  // optional bytes cl_filter = 10;
  inline bool has_cl_filter() const;
  inline void clear_cl_filter();
  static const int kClFilterFieldNumber = 10;
  inline const ::std::string& cl_filter() const;
  inline void set_cl_filter(const ::std::string& value);
  inline void set_cl_filter(const char* value);
  inline void set_cl_filter(const void* value, size_t size);
  inline ::std::string* mutable_cl_filter();
  
  // optional bytes text_filter = 11;
  inline bool has_text_filter() const;
  inline void clear_text_filter();
  static const int kTextFilterFieldNumber = 11;
  inline const ::std::string& text_filter() const;
  inline void set_text_filter(const ::std::string& value);
  inline void set_text_filter(const char* value);
  inline void set_text_filter(const void* value, size_t size);
  inline ::std::string* mutable_text_filter();
  
  // optional bytes docid_filter = 12;
  inline bool has_docid_filter() const;
  inline void clear_docid_filter();
  static const int kDocidFilterFieldNumber = 12;
  inline const ::std::string& docid_filter() const;
  inline void set_docid_filter(const ::std::string& value);
  inline void set_docid_filter(const char* value);
  inline void set_docid_filter(const void* value, size_t size);
  inline ::std::string* mutable_docid_filter();
  
  // optional bytes extra = 13;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 13;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const void* value, size_t size);
  inline ::std::string* mutable_extra();
  
  // optional .SearchConfig search_config = 14;
  inline bool has_search_config() const;
  inline void clear_search_config();
  static const int kSearchConfigFieldNumber = 14;
  inline const ::SearchConfig& search_config() const;
  inline ::SearchConfig* mutable_search_config();
  
  // optional uint32 source_id = 15;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 15;
  inline ::google::protobuf::uint32 source_id() const;
  inline void set_source_id(::google::protobuf::uint32 value);
  
  // optional uint32 app_id = 16;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 16;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);
  
  // optional uint32 query_encode = 17;
  inline bool has_query_encode() const;
  inline void clear_query_encode();
  static const int kQueryEncodeFieldNumber = 17;
  inline ::google::protobuf::uint32 query_encode() const;
  inline void set_query_encode(::google::protobuf::uint32 value);
  
  // optional bytes indexd_extension = 18;
  inline bool has_indexd_extension() const;
  inline void clear_indexd_extension();
  static const int kIndexdExtensionFieldNumber = 18;
  inline const ::std::string& indexd_extension() const;
  inline void set_indexd_extension(const ::std::string& value);
  inline void set_indexd_extension(const char* value);
  inline void set_indexd_extension(const void* value, size_t size);
  inline ::std::string* mutable_indexd_extension();
  
  // optional bool disable_qc = 19 [default = false];
  inline bool has_disable_qc() const;
  inline void clear_disable_qc();
  static const int kDisableQcFieldNumber = 19;
  inline bool disable_qc() const;
  inline void set_disable_qc(bool value);
  
  // optional bool enable_abs_highlight = 20 [default = false];
  inline bool has_enable_abs_highlight() const;
  inline void clear_enable_abs_highlight();
  static const int kEnableAbsHighlightFieldNumber = 20;
  inline bool enable_abs_highlight() const;
  inline void set_enable_abs_highlight(bool value);
  
  // optional uint32 second_search = 21 [default = 0];
  inline bool has_second_search() const;
  inline void clear_second_search();
  static const int kSecondSearchFieldNumber = 21;
  inline ::google::protobuf::uint32 second_search() const;
  inline void set_second_search(::google::protobuf::uint32 value);
  
  // optional bytes sort = 22;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 22;
  inline const ::std::string& sort() const;
  inline void set_sort(const ::std::string& value);
  inline void set_sort(const char* value);
  inline void set_sort(const void* value, size_t size);
  inline ::std::string* mutable_sort();
  
  // optional uint32 start_idx = 23;
  inline bool has_start_idx() const;
  inline void clear_start_idx();
  static const int kStartIdxFieldNumber = 23;
  inline ::google::protobuf::uint32 start_idx() const;
  inline void set_start_idx(::google::protobuf::uint32 value);
  
  // optional uint32 end_idx = 24;
  inline bool has_end_idx() const;
  inline void clear_end_idx();
  static const int kEndIdxFieldNumber = 24;
  inline ::google::protobuf::uint32 end_idx() const;
  inline void set_end_idx(::google::protobuf::uint32 value);
  
  // optional .SemanticInput semantic_request = 51;
  inline bool has_semantic_request() const;
  inline void clear_semantic_request();
  static const int kSemanticRequestFieldNumber = 51;
  inline const ::SemanticInput& semantic_request() const;
  inline ::SemanticInput* mutable_semantic_request();
  
  // optional uint32 qc_bid = 201 [default = 0];
  inline bool has_qc_bid() const;
  inline void clear_qc_bid();
  static const int kQcBidFieldNumber = 201;
  inline ::google::protobuf::uint32 qc_bid() const;
  inline void set_qc_bid(::google::protobuf::uint32 value);
  
  // optional uint32 max_doc_return = 202 [default = 300];
  inline bool has_max_doc_return() const;
  inline void clear_max_doc_return();
  static const int kMaxDocReturnFieldNumber = 202;
  inline ::google::protobuf::uint32 max_doc_return() const;
  inline void set_max_doc_return(::google::protobuf::uint32 value);
  
  // optional uint32 use_qbc_info = 203 [default = 0];
  inline bool has_use_qbc_info() const;
  inline void clear_use_qbc_info();
  static const int kUseQbcInfoFieldNumber = 203;
  inline ::google::protobuf::uint32 use_qbc_info() const;
  inline void set_use_qbc_info(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RBURequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* search_id_;
  static const ::std::string _default_search_id_;
  ::google::protobuf::uint32 client_ip_;
  ::std::string* echo_;
  static const ::std::string _default_echo_;
  ::std::string* search_query_;
  static const ::std::string _default_search_query_;
  ::google::protobuf::uint32 page_id_;
  ::google::protobuf::uint32 num_per_page_;
  ::google::protobuf::uint32 rank_type_;
  ::google::protobuf::uint32 debug_flag_;
  ::std::string* num_filter_;
  static const ::std::string _default_num_filter_;
  ::std::string* cl_filter_;
  static const ::std::string _default_cl_filter_;
  ::std::string* text_filter_;
  static const ::std::string _default_text_filter_;
  ::std::string* docid_filter_;
  static const ::std::string _default_docid_filter_;
  ::std::string* extra_;
  static const ::std::string _default_extra_;
  ::SearchConfig* search_config_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 query_encode_;
  ::std::string* indexd_extension_;
  static const ::std::string _default_indexd_extension_;
  bool disable_qc_;
  bool enable_abs_highlight_;
  ::google::protobuf::uint32 second_search_;
  ::std::string* sort_;
  static const ::std::string _default_sort_;
  ::google::protobuf::uint32 start_idx_;
  ::google::protobuf::uint32 end_idx_;
  ::SemanticInput* semantic_request_;
  ::google::protobuf::uint32 qc_bid_;
  ::google::protobuf::uint32 max_doc_return_;
  ::google::protobuf::uint32 use_qbc_info_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RBURequest* default_instance_;
};
// -------------------------------------------------------------------

class RBUResponse : public ::google::protobuf::Message {
 public:
  RBUResponse();
  virtual ~RBUResponse();
  
  RBUResponse(const RBUResponse& from);
  
  inline RBUResponse& operator=(const RBUResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RBUResponse& default_instance();
  
  void Swap(RBUResponse* other);
  
  // implements Message ----------------------------------------------
  
  RBUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RBUResponse& from);
  void MergeFrom(const RBUResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);
  
  // optional bytes retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const void* value, size_t size);
  inline ::std::string* mutable_retmsg();
  
  // optional bytes echo = 3;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 3;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const void* value, size_t size);
  inline ::std::string* mutable_echo();
  
  // repeated .RBUDocItem result_list = 4;
  inline int result_list_size() const;
  inline void clear_result_list();
  static const int kResultListFieldNumber = 4;
  inline const ::RBUDocItem& result_list(int index) const;
  inline ::RBUDocItem* mutable_result_list(int index);
  inline ::RBUDocItem* add_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::RBUDocItem >&
      result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::RBUDocItem >*
      mutable_result_list();
  
  // required int32 result_num = 5;
  inline bool has_result_num() const;
  inline void clear_result_num();
  static const int kResultNumFieldNumber = 5;
  inline ::google::protobuf::int32 result_num() const;
  inline void set_result_num(::google::protobuf::int32 value);
  
  // required int32 display_num = 6;
  inline bool has_display_num() const;
  inline void clear_display_num();
  static const int kDisplayNumFieldNumber = 6;
  inline ::google::protobuf::int32 display_num() const;
  inline void set_display_num(::google::protobuf::int32 value);
  
  // required int32 eresult_num = 7;
  inline bool has_eresult_num() const;
  inline void clear_eresult_num();
  static const int kEresultNumFieldNumber = 7;
  inline ::google::protobuf::int32 eresult_num() const;
  inline void set_eresult_num(::google::protobuf::int32 value);
  
  // optional int32 cost_time = 8;
  inline bool has_cost_time() const;
  inline void clear_cost_time();
  static const int kCostTimeFieldNumber = 8;
  inline ::google::protobuf::int32 cost_time() const;
  inline void set_cost_time(::google::protobuf::int32 value);
  
  // optional .RBUDebugInfo debug_info = 9;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 9;
  inline const ::RBUDebugInfo& debug_info() const;
  inline ::RBUDebugInfo* mutable_debug_info();
  
  // repeated bytes seg_str_list = 10;
  inline int seg_str_list_size() const;
  inline void clear_seg_str_list();
  static const int kSegStrListFieldNumber = 10;
  inline const ::std::string& seg_str_list(int index) const;
  inline ::std::string* mutable_seg_str_list(int index);
  inline void set_seg_str_list(int index, const ::std::string& value);
  inline void set_seg_str_list(int index, const char* value);
  inline void set_seg_str_list(int index, const void* value, size_t size);
  inline ::std::string* add_seg_str_list();
  inline void add_seg_str_list(const ::std::string& value);
  inline void add_seg_str_list(const char* value);
  inline void add_seg_str_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& seg_str_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_seg_str_list();
  
  // repeated uint64 seg_int_list = 11;
  inline int seg_int_list_size() const;
  inline void clear_seg_int_list();
  static const int kSegIntListFieldNumber = 11;
  inline ::google::protobuf::uint64 seg_int_list(int index) const;
  inline void set_seg_int_list(int index, ::google::protobuf::uint64 value);
  inline void add_seg_int_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      seg_int_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_seg_int_list();
  
  // optional bytes qrw_result = 12;
  inline bool has_qrw_result() const;
  inline void clear_qrw_result();
  static const int kQrwResultFieldNumber = 12;
  inline const ::std::string& qrw_result() const;
  inline void set_qrw_result(const ::std::string& value);
  inline void set_qrw_result(const char* value);
  inline void set_qrw_result(const void* value, size_t size);
  inline ::std::string* mutable_qrw_result();
  
  // optional bytes l4_output = 13;
  inline bool has_l4_output() const;
  inline void clear_l4_output();
  static const int kL4OutputFieldNumber = 13;
  inline const ::std::string& l4_output() const;
  inline void set_l4_output(const ::std::string& value);
  inline void set_l4_output(const char* value);
  inline void set_l4_output(const void* value, size_t size);
  inline ::std::string* mutable_l4_output();
  
  // repeated .PlatformOutItem platform_output = 14;
  inline int platform_output_size() const;
  inline void clear_platform_output();
  static const int kPlatformOutputFieldNumber = 14;
  inline const ::PlatformOutItem& platform_output(int index) const;
  inline ::PlatformOutItem* mutable_platform_output(int index);
  inline ::PlatformOutItem* add_platform_output();
  inline const ::google::protobuf::RepeatedPtrField< ::PlatformOutItem >&
      platform_output() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlatformOutItem >*
      mutable_platform_output();
  
  // optional .SemanticOutput semantic_response = 51;
  inline bool has_semantic_response() const;
  inline void clear_semantic_response();
  static const int kSemanticResponseFieldNumber = 51;
  inline const ::SemanticOutput& semantic_response() const;
  inline ::SemanticOutput* mutable_semantic_response();
  
  // @@protoc_insertion_point(class_scope:RBUResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 retcode_;
  ::std::string* retmsg_;
  static const ::std::string _default_retmsg_;
  ::std::string* echo_;
  static const ::std::string _default_echo_;
  ::google::protobuf::RepeatedPtrField< ::RBUDocItem > result_list_;
  ::google::protobuf::int32 result_num_;
  ::google::protobuf::int32 display_num_;
  ::google::protobuf::int32 eresult_num_;
  ::google::protobuf::int32 cost_time_;
  ::RBUDebugInfo* debug_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> seg_str_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > seg_int_list_;
  ::std::string* qrw_result_;
  static const ::std::string _default_qrw_result_;
  ::std::string* l4_output_;
  static const ::std::string _default_l4_output_;
  ::google::protobuf::RepeatedPtrField< ::PlatformOutItem > platform_output_;
  ::SemanticOutput* semantic_response_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RBUResponse* default_instance_;
};
// -------------------------------------------------------------------

class PlatformOutItem : public ::google::protobuf::Message {
 public:
  PlatformOutItem();
  virtual ~PlatformOutItem();
  
  PlatformOutItem(const PlatformOutItem& from);
  
  inline PlatformOutItem& operator=(const PlatformOutItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatformOutItem& default_instance();
  
  void Swap(PlatformOutItem* other);
  
  // implements Message ----------------------------------------------
  
  PlatformOutItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlatformOutItem& from);
  void MergeFrom(const PlatformOutItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 qrw_item_idx = 1;
  inline bool has_qrw_item_idx() const;
  inline void clear_qrw_item_idx();
  static const int kQrwItemIdxFieldNumber = 1;
  inline ::google::protobuf::int32 qrw_item_idx() const;
  inline void set_qrw_item_idx(::google::protobuf::int32 value);
  
  // optional bytes platform_output = 2;
  inline bool has_platform_output() const;
  inline void clear_platform_output();
  static const int kPlatformOutputFieldNumber = 2;
  inline const ::std::string& platform_output() const;
  inline void set_platform_output(const ::std::string& value);
  inline void set_platform_output(const char* value);
  inline void set_platform_output(const void* value, size_t size);
  inline ::std::string* mutable_platform_output();
  
  // @@protoc_insertion_point(class_scope:PlatformOutItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 qrw_item_idx_;
  ::std::string* platform_output_;
  static const ::std::string _default_platform_output_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PlatformOutItem* default_instance_;
};
// -------------------------------------------------------------------

class SemanticInput : public ::google::protobuf::Message {
 public:
  SemanticInput();
  virtual ~SemanticInput();
  
  SemanticInput(const SemanticInput& from);
  
  inline SemanticInput& operator=(const SemanticInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SemanticInput& default_instance();
  
  void Swap(SemanticInput* other);
  
  // implements Message ----------------------------------------------
  
  SemanticInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SemanticInput& from);
  void MergeFrom(const SemanticInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 semantic_page_id = 1;
  inline bool has_semantic_page_id() const;
  inline void clear_semantic_page_id();
  static const int kSemanticPageIdFieldNumber = 1;
  inline ::google::protobuf::uint32 semantic_page_id() const;
  inline void set_semantic_page_id(::google::protobuf::uint32 value);
  
  // optional uint32 semantic_num_per_page = 2;
  inline bool has_semantic_num_per_page() const;
  inline void clear_semantic_num_per_page();
  static const int kSemanticNumPerPageFieldNumber = 2;
  inline ::google::protobuf::uint32 semantic_num_per_page() const;
  inline void set_semantic_num_per_page(::google::protobuf::uint32 value);
  
  // optional uint32 semantic_start_idx = 3;
  inline bool has_semantic_start_idx() const;
  inline void clear_semantic_start_idx();
  static const int kSemanticStartIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 semantic_start_idx() const;
  inline void set_semantic_start_idx(::google::protobuf::uint32 value);
  
  // optional uint32 semantic_end_idx = 4;
  inline bool has_semantic_end_idx() const;
  inline void clear_semantic_end_idx();
  static const int kSemanticEndIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 semantic_end_idx() const;
  inline void set_semantic_end_idx(::google::protobuf::uint32 value);
  
  // optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
  inline bool has_semantic_req_type() const;
  inline void clear_semantic_req_type();
  static const int kSemanticReqTypeFieldNumber = 5;
  inline SemanticReqType semantic_req_type() const;
  inline void set_semantic_req_type(SemanticReqType value);
  
  // @@protoc_insertion_point(class_scope:SemanticInput)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 semantic_page_id_;
  ::google::protobuf::uint32 semantic_num_per_page_;
  ::google::protobuf::uint32 semantic_start_idx_;
  ::google::protobuf::uint32 semantic_end_idx_;
  int semantic_req_type_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SemanticInput* default_instance_;
};
// -------------------------------------------------------------------

class SemanticOutput : public ::google::protobuf::Message {
 public:
  SemanticOutput();
  virtual ~SemanticOutput();
  
  SemanticOutput(const SemanticOutput& from);
  
  inline SemanticOutput& operator=(const SemanticOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SemanticOutput& default_instance();
  
  void Swap(SemanticOutput* other);
  
  // implements Message ----------------------------------------------
  
  SemanticOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SemanticOutput& from);
  void MergeFrom(const SemanticOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RBUDocItem semantic_result_list = 1;
  inline int semantic_result_list_size() const;
  inline void clear_semantic_result_list();
  static const int kSemanticResultListFieldNumber = 1;
  inline const ::RBUDocItem& semantic_result_list(int index) const;
  inline ::RBUDocItem* mutable_semantic_result_list(int index);
  inline ::RBUDocItem* add_semantic_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::RBUDocItem >&
      semantic_result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::RBUDocItem >*
      mutable_semantic_result_list();
  
  // optional int32 semantic_result_num = 2;
  inline bool has_semantic_result_num() const;
  inline void clear_semantic_result_num();
  static const int kSemanticResultNumFieldNumber = 2;
  inline ::google::protobuf::int32 semantic_result_num() const;
  inline void set_semantic_result_num(::google::protobuf::int32 value);
  
  // optional int32 semantic_display_num = 3;
  inline bool has_semantic_display_num() const;
  inline void clear_semantic_display_num();
  static const int kSemanticDisplayNumFieldNumber = 3;
  inline ::google::protobuf::int32 semantic_display_num() const;
  inline void set_semantic_display_num(::google::protobuf::int32 value);
  
  // optional int32 semantic_eresult_num = 4;
  inline bool has_semantic_eresult_num() const;
  inline void clear_semantic_eresult_num();
  static const int kSemanticEresultNumFieldNumber = 4;
  inline ::google::protobuf::int32 semantic_eresult_num() const;
  inline void set_semantic_eresult_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SemanticOutput)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::RBUDocItem > semantic_result_list_;
  ::google::protobuf::int32 semantic_result_num_;
  ::google::protobuf::int32 semantic_display_num_;
  ::google::protobuf::int32 semantic_eresult_num_;
  friend void  protobuf_AddDesc_business_5finterface_2eproto();
  friend void protobuf_AssignDesc_business_5finterface_2eproto();
  friend void protobuf_ShutdownFile_business_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SemanticOutput* default_instance_;
};
// ===================================================================


// ===================================================================

// RBUDocItem

// optional uint64 docid = 1;
inline bool RBUDocItem::has_docid() const {
  return _has_bit(0);
}
inline void RBUDocItem::clear_docid() {
  docid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 RBUDocItem::docid() const {
  return docid_;
}
inline void RBUDocItem::set_docid(::google::protobuf::uint64 value) {
  _set_bit(0);
  docid_ = value;
}

// optional uint64 inner_docid = 2;
inline bool RBUDocItem::has_inner_docid() const {
  return _has_bit(1);
}
inline void RBUDocItem::clear_inner_docid() {
  inner_docid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 RBUDocItem::inner_docid() const {
  return inner_docid_;
}
inline void RBUDocItem::set_inner_docid(::google::protobuf::uint64 value) {
  _set_bit(1);
  inner_docid_ = value;
}

// optional bytes doc_meta = 3;
inline bool RBUDocItem::has_doc_meta() const {
  return _has_bit(2);
}
inline void RBUDocItem::clear_doc_meta() {
  if (doc_meta_ != &_default_doc_meta_) {
    doc_meta_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RBUDocItem::doc_meta() const {
  return *doc_meta_;
}
inline void RBUDocItem::set_doc_meta(const ::std::string& value) {
  _set_bit(2);
  if (doc_meta_ == &_default_doc_meta_) {
    doc_meta_ = new ::std::string;
  }
  doc_meta_->assign(value);
}
inline void RBUDocItem::set_doc_meta(const char* value) {
  _set_bit(2);
  if (doc_meta_ == &_default_doc_meta_) {
    doc_meta_ = new ::std::string;
  }
  doc_meta_->assign(value);
}
inline void RBUDocItem::set_doc_meta(const void* value, size_t size) {
  _set_bit(2);
  if (doc_meta_ == &_default_doc_meta_) {
    doc_meta_ = new ::std::string;
  }
  doc_meta_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_doc_meta() {
  _set_bit(2);
  if (doc_meta_ == &_default_doc_meta_) {
    doc_meta_ = new ::std::string;
  }
  return doc_meta_;
}

// optional bytes search_debug_info = 4;
inline bool RBUDocItem::has_search_debug_info() const {
  return _has_bit(3);
}
inline void RBUDocItem::clear_search_debug_info() {
  if (search_debug_info_ != &_default_search_debug_info_) {
    search_debug_info_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RBUDocItem::search_debug_info() const {
  return *search_debug_info_;
}
inline void RBUDocItem::set_search_debug_info(const ::std::string& value) {
  _set_bit(3);
  if (search_debug_info_ == &_default_search_debug_info_) {
    search_debug_info_ = new ::std::string;
  }
  search_debug_info_->assign(value);
}
inline void RBUDocItem::set_search_debug_info(const char* value) {
  _set_bit(3);
  if (search_debug_info_ == &_default_search_debug_info_) {
    search_debug_info_ = new ::std::string;
  }
  search_debug_info_->assign(value);
}
inline void RBUDocItem::set_search_debug_info(const void* value, size_t size) {
  _set_bit(3);
  if (search_debug_info_ == &_default_search_debug_info_) {
    search_debug_info_ = new ::std::string;
  }
  search_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_search_debug_info() {
  _set_bit(3);
  if (search_debug_info_ == &_default_search_debug_info_) {
    search_debug_info_ = new ::std::string;
  }
  return search_debug_info_;
}

// optional bytes rela_debug_info = 5;
inline bool RBUDocItem::has_rela_debug_info() const {
  return _has_bit(4);
}
inline void RBUDocItem::clear_rela_debug_info() {
  if (rela_debug_info_ != &_default_rela_debug_info_) {
    rela_debug_info_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RBUDocItem::rela_debug_info() const {
  return *rela_debug_info_;
}
inline void RBUDocItem::set_rela_debug_info(const ::std::string& value) {
  _set_bit(4);
  if (rela_debug_info_ == &_default_rela_debug_info_) {
    rela_debug_info_ = new ::std::string;
  }
  rela_debug_info_->assign(value);
}
inline void RBUDocItem::set_rela_debug_info(const char* value) {
  _set_bit(4);
  if (rela_debug_info_ == &_default_rela_debug_info_) {
    rela_debug_info_ = new ::std::string;
  }
  rela_debug_info_->assign(value);
}
inline void RBUDocItem::set_rela_debug_info(const void* value, size_t size) {
  _set_bit(4);
  if (rela_debug_info_ == &_default_rela_debug_info_) {
    rela_debug_info_ = new ::std::string;
  }
  rela_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_rela_debug_info() {
  _set_bit(4);
  if (rela_debug_info_ == &_default_rela_debug_info_) {
    rela_debug_info_ = new ::std::string;
  }
  return rela_debug_info_;
}

// optional bytes merge_debug_info = 6;
inline bool RBUDocItem::has_merge_debug_info() const {
  return _has_bit(5);
}
inline void RBUDocItem::clear_merge_debug_info() {
  if (merge_debug_info_ != &_default_merge_debug_info_) {
    merge_debug_info_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RBUDocItem::merge_debug_info() const {
  return *merge_debug_info_;
}
inline void RBUDocItem::set_merge_debug_info(const ::std::string& value) {
  _set_bit(5);
  if (merge_debug_info_ == &_default_merge_debug_info_) {
    merge_debug_info_ = new ::std::string;
  }
  merge_debug_info_->assign(value);
}
inline void RBUDocItem::set_merge_debug_info(const char* value) {
  _set_bit(5);
  if (merge_debug_info_ == &_default_merge_debug_info_) {
    merge_debug_info_ = new ::std::string;
  }
  merge_debug_info_->assign(value);
}
inline void RBUDocItem::set_merge_debug_info(const void* value, size_t size) {
  _set_bit(5);
  if (merge_debug_info_ == &_default_merge_debug_info_) {
    merge_debug_info_ = new ::std::string;
  }
  merge_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_merge_debug_info() {
  _set_bit(5);
  if (merge_debug_info_ == &_default_merge_debug_info_) {
    merge_debug_info_ = new ::std::string;
  }
  return merge_debug_info_;
}

// optional float l0_score = 7;
inline bool RBUDocItem::has_l0_score() const {
  return _has_bit(6);
}
inline void RBUDocItem::clear_l0_score() {
  l0_score_ = 0;
  _clear_bit(6);
}
inline float RBUDocItem::l0_score() const {
  return l0_score_;
}
inline void RBUDocItem::set_l0_score(float value) {
  _set_bit(6);
  l0_score_ = value;
}

// optional float l1_score = 8;
inline bool RBUDocItem::has_l1_score() const {
  return _has_bit(7);
}
inline void RBUDocItem::clear_l1_score() {
  l1_score_ = 0;
  _clear_bit(7);
}
inline float RBUDocItem::l1_score() const {
  return l1_score_;
}
inline void RBUDocItem::set_l1_score(float value) {
  _set_bit(7);
  l1_score_ = value;
}

// optional float l2_score = 9;
inline bool RBUDocItem::has_l2_score() const {
  return _has_bit(8);
}
inline void RBUDocItem::clear_l2_score() {
  l2_score_ = 0;
  _clear_bit(8);
}
inline float RBUDocItem::l2_score() const {
  return l2_score_;
}
inline void RBUDocItem::set_l2_score(float value) {
  _set_bit(8);
  l2_score_ = value;
}

// optional bytes raw_abs = 10;
inline bool RBUDocItem::has_raw_abs() const {
  return _has_bit(9);
}
inline void RBUDocItem::clear_raw_abs() {
  if (raw_abs_ != &_default_raw_abs_) {
    raw_abs_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& RBUDocItem::raw_abs() const {
  return *raw_abs_;
}
inline void RBUDocItem::set_raw_abs(const ::std::string& value) {
  _set_bit(9);
  if (raw_abs_ == &_default_raw_abs_) {
    raw_abs_ = new ::std::string;
  }
  raw_abs_->assign(value);
}
inline void RBUDocItem::set_raw_abs(const char* value) {
  _set_bit(9);
  if (raw_abs_ == &_default_raw_abs_) {
    raw_abs_ = new ::std::string;
  }
  raw_abs_->assign(value);
}
inline void RBUDocItem::set_raw_abs(const void* value, size_t size) {
  _set_bit(9);
  if (raw_abs_ == &_default_raw_abs_) {
    raw_abs_ = new ::std::string;
  }
  raw_abs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_raw_abs() {
  _set_bit(9);
  if (raw_abs_ == &_default_raw_abs_) {
    raw_abs_ = new ::std::string;
  }
  return raw_abs_;
}

// optional int32 qrw_idx = 11;
inline bool RBUDocItem::has_qrw_idx() const {
  return _has_bit(10);
}
inline void RBUDocItem::clear_qrw_idx() {
  qrw_idx_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 RBUDocItem::qrw_idx() const {
  return qrw_idx_;
}
inline void RBUDocItem::set_qrw_idx(::google::protobuf::int32 value) {
  _set_bit(10);
  qrw_idx_ = value;
}

// optional int32 xob_mask = 12;
inline bool RBUDocItem::has_xob_mask() const {
  return _has_bit(11);
}
inline void RBUDocItem::clear_xob_mask() {
  xob_mask_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 RBUDocItem::xob_mask() const {
  return xob_mask_;
}
inline void RBUDocItem::set_xob_mask(::google::protobuf::int32 value) {
  _set_bit(11);
  xob_mask_ = value;
}

// optional bytes su_docitem = 13;
inline bool RBUDocItem::has_su_docitem() const {
  return _has_bit(12);
}
inline void RBUDocItem::clear_su_docitem() {
  if (su_docitem_ != &_default_su_docitem_) {
    su_docitem_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& RBUDocItem::su_docitem() const {
  return *su_docitem_;
}
inline void RBUDocItem::set_su_docitem(const ::std::string& value) {
  _set_bit(12);
  if (su_docitem_ == &_default_su_docitem_) {
    su_docitem_ = new ::std::string;
  }
  su_docitem_->assign(value);
}
inline void RBUDocItem::set_su_docitem(const char* value) {
  _set_bit(12);
  if (su_docitem_ == &_default_su_docitem_) {
    su_docitem_ = new ::std::string;
  }
  su_docitem_->assign(value);
}
inline void RBUDocItem::set_su_docitem(const void* value, size_t size) {
  _set_bit(12);
  if (su_docitem_ == &_default_su_docitem_) {
    su_docitem_ = new ::std::string;
  }
  su_docitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_su_docitem() {
  _set_bit(12);
  if (su_docitem_ == &_default_su_docitem_) {
    su_docitem_ = new ::std::string;
  }
  return su_docitem_;
}

// optional bytes l4_output = 14;
inline bool RBUDocItem::has_l4_output() const {
  return _has_bit(13);
}
inline void RBUDocItem::clear_l4_output() {
  if (l4_output_ != &_default_l4_output_) {
    l4_output_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& RBUDocItem::l4_output() const {
  return *l4_output_;
}
inline void RBUDocItem::set_l4_output(const ::std::string& value) {
  _set_bit(13);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(value);
}
inline void RBUDocItem::set_l4_output(const char* value) {
  _set_bit(13);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(value);
}
inline void RBUDocItem::set_l4_output(const void* value, size_t size) {
  _set_bit(13);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_l4_output() {
  _set_bit(13);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  return l4_output_;
}

// optional bytes platform_output = 15;
inline bool RBUDocItem::has_platform_output() const {
  return _has_bit(14);
}
inline void RBUDocItem::clear_platform_output() {
  if (platform_output_ != &_default_platform_output_) {
    platform_output_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& RBUDocItem::platform_output() const {
  return *platform_output_;
}
inline void RBUDocItem::set_platform_output(const ::std::string& value) {
  _set_bit(14);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(value);
}
inline void RBUDocItem::set_platform_output(const char* value) {
  _set_bit(14);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(value);
}
inline void RBUDocItem::set_platform_output(const void* value, size_t size) {
  _set_bit(14);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_platform_output() {
  _set_bit(14);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  return platform_output_;
}

// optional bytes qbc_info = 201;
inline bool RBUDocItem::has_qbc_info() const {
  return _has_bit(15);
}
inline void RBUDocItem::clear_qbc_info() {
  if (qbc_info_ != &_default_qbc_info_) {
    qbc_info_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& RBUDocItem::qbc_info() const {
  return *qbc_info_;
}
inline void RBUDocItem::set_qbc_info(const ::std::string& value) {
  _set_bit(15);
  if (qbc_info_ == &_default_qbc_info_) {
    qbc_info_ = new ::std::string;
  }
  qbc_info_->assign(value);
}
inline void RBUDocItem::set_qbc_info(const char* value) {
  _set_bit(15);
  if (qbc_info_ == &_default_qbc_info_) {
    qbc_info_ = new ::std::string;
  }
  qbc_info_->assign(value);
}
inline void RBUDocItem::set_qbc_info(const void* value, size_t size) {
  _set_bit(15);
  if (qbc_info_ == &_default_qbc_info_) {
    qbc_info_ = new ::std::string;
  }
  qbc_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDocItem::mutable_qbc_info() {
  _set_bit(15);
  if (qbc_info_ == &_default_qbc_info_) {
    qbc_info_ = new ::std::string;
  }
  return qbc_info_;
}

// -------------------------------------------------------------------

// SearchConfig

// optional uint32 debug_info_level = 1;
inline bool SearchConfig::has_debug_info_level() const {
  return _has_bit(0);
}
inline void SearchConfig::clear_debug_info_level() {
  debug_info_level_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SearchConfig::debug_info_level() const {
  return debug_info_level_;
}
inline void SearchConfig::set_debug_info_level(::google::protobuf::uint32 value) {
  _set_bit(0);
  debug_info_level_ = value;
}

// optional uint64 xob_mask = 2;
inline bool SearchConfig::has_xob_mask() const {
  return _has_bit(1);
}
inline void SearchConfig::clear_xob_mask() {
  xob_mask_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 SearchConfig::xob_mask() const {
  return xob_mask_;
}
inline void SearchConfig::set_xob_mask(::google::protobuf::uint64 value) {
  _set_bit(1);
  xob_mask_ = value;
}

// optional bytes whiteboard_qrw = 4;
inline bool SearchConfig::has_whiteboard_qrw() const {
  return _has_bit(2);
}
inline void SearchConfig::clear_whiteboard_qrw() {
  if (whiteboard_qrw_ != &_default_whiteboard_qrw_) {
    whiteboard_qrw_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SearchConfig::whiteboard_qrw() const {
  return *whiteboard_qrw_;
}
inline void SearchConfig::set_whiteboard_qrw(const ::std::string& value) {
  _set_bit(2);
  if (whiteboard_qrw_ == &_default_whiteboard_qrw_) {
    whiteboard_qrw_ = new ::std::string;
  }
  whiteboard_qrw_->assign(value);
}
inline void SearchConfig::set_whiteboard_qrw(const char* value) {
  _set_bit(2);
  if (whiteboard_qrw_ == &_default_whiteboard_qrw_) {
    whiteboard_qrw_ = new ::std::string;
  }
  whiteboard_qrw_->assign(value);
}
inline void SearchConfig::set_whiteboard_qrw(const void* value, size_t size) {
  _set_bit(2);
  if (whiteboard_qrw_ == &_default_whiteboard_qrw_) {
    whiteboard_qrw_ = new ::std::string;
  }
  whiteboard_qrw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchConfig::mutable_whiteboard_qrw() {
  _set_bit(2);
  if (whiteboard_qrw_ == &_default_whiteboard_qrw_) {
    whiteboard_qrw_ = new ::std::string;
  }
  return whiteboard_qrw_;
}

// optional bytes qrw_ip = 5;
inline bool SearchConfig::has_qrw_ip() const {
  return _has_bit(3);
}
inline void SearchConfig::clear_qrw_ip() {
  if (qrw_ip_ != &_default_qrw_ip_) {
    qrw_ip_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SearchConfig::qrw_ip() const {
  return *qrw_ip_;
}
inline void SearchConfig::set_qrw_ip(const ::std::string& value) {
  _set_bit(3);
  if (qrw_ip_ == &_default_qrw_ip_) {
    qrw_ip_ = new ::std::string;
  }
  qrw_ip_->assign(value);
}
inline void SearchConfig::set_qrw_ip(const char* value) {
  _set_bit(3);
  if (qrw_ip_ == &_default_qrw_ip_) {
    qrw_ip_ = new ::std::string;
  }
  qrw_ip_->assign(value);
}
inline void SearchConfig::set_qrw_ip(const void* value, size_t size) {
  _set_bit(3);
  if (qrw_ip_ == &_default_qrw_ip_) {
    qrw_ip_ = new ::std::string;
  }
  qrw_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchConfig::mutable_qrw_ip() {
  _set_bit(3);
  if (qrw_ip_ == &_default_qrw_ip_) {
    qrw_ip_ = new ::std::string;
  }
  return qrw_ip_;
}

// optional int32 qrw_port = 6;
inline bool SearchConfig::has_qrw_port() const {
  return _has_bit(4);
}
inline void SearchConfig::clear_qrw_port() {
  qrw_port_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SearchConfig::qrw_port() const {
  return qrw_port_;
}
inline void SearchConfig::set_qrw_port(::google::protobuf::int32 value) {
  _set_bit(4);
  qrw_port_ = value;
}

// optional bytes dignose_queryd_req_info = 7;
inline bool SearchConfig::has_dignose_queryd_req_info() const {
  return _has_bit(5);
}
inline void SearchConfig::clear_dignose_queryd_req_info() {
  if (dignose_queryd_req_info_ != &_default_dignose_queryd_req_info_) {
    dignose_queryd_req_info_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SearchConfig::dignose_queryd_req_info() const {
  return *dignose_queryd_req_info_;
}
inline void SearchConfig::set_dignose_queryd_req_info(const ::std::string& value) {
  _set_bit(5);
  if (dignose_queryd_req_info_ == &_default_dignose_queryd_req_info_) {
    dignose_queryd_req_info_ = new ::std::string;
  }
  dignose_queryd_req_info_->assign(value);
}
inline void SearchConfig::set_dignose_queryd_req_info(const char* value) {
  _set_bit(5);
  if (dignose_queryd_req_info_ == &_default_dignose_queryd_req_info_) {
    dignose_queryd_req_info_ = new ::std::string;
  }
  dignose_queryd_req_info_->assign(value);
}
inline void SearchConfig::set_dignose_queryd_req_info(const void* value, size_t size) {
  _set_bit(5);
  if (dignose_queryd_req_info_ == &_default_dignose_queryd_req_info_) {
    dignose_queryd_req_info_ = new ::std::string;
  }
  dignose_queryd_req_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchConfig::mutable_dignose_queryd_req_info() {
  _set_bit(5);
  if (dignose_queryd_req_info_ == &_default_dignose_queryd_req_info_) {
    dignose_queryd_req_info_ = new ::std::string;
  }
  return dignose_queryd_req_info_;
}

// optional bytes dignose_abs_req_info = 8;
inline bool SearchConfig::has_dignose_abs_req_info() const {
  return _has_bit(6);
}
inline void SearchConfig::clear_dignose_abs_req_info() {
  if (dignose_abs_req_info_ != &_default_dignose_abs_req_info_) {
    dignose_abs_req_info_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SearchConfig::dignose_abs_req_info() const {
  return *dignose_abs_req_info_;
}
inline void SearchConfig::set_dignose_abs_req_info(const ::std::string& value) {
  _set_bit(6);
  if (dignose_abs_req_info_ == &_default_dignose_abs_req_info_) {
    dignose_abs_req_info_ = new ::std::string;
  }
  dignose_abs_req_info_->assign(value);
}
inline void SearchConfig::set_dignose_abs_req_info(const char* value) {
  _set_bit(6);
  if (dignose_abs_req_info_ == &_default_dignose_abs_req_info_) {
    dignose_abs_req_info_ = new ::std::string;
  }
  dignose_abs_req_info_->assign(value);
}
inline void SearchConfig::set_dignose_abs_req_info(const void* value, size_t size) {
  _set_bit(6);
  if (dignose_abs_req_info_ == &_default_dignose_abs_req_info_) {
    dignose_abs_req_info_ = new ::std::string;
  }
  dignose_abs_req_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchConfig::mutable_dignose_abs_req_info() {
  _set_bit(6);
  if (dignose_abs_req_info_ == &_default_dignose_abs_req_info_) {
    dignose_abs_req_info_ = new ::std::string;
  }
  return dignose_abs_req_info_;
}

// optional uint32 whiteboard_debug_flag = 9;
inline bool SearchConfig::has_whiteboard_debug_flag() const {
  return _has_bit(7);
}
inline void SearchConfig::clear_whiteboard_debug_flag() {
  whiteboard_debug_flag_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 SearchConfig::whiteboard_debug_flag() const {
  return whiteboard_debug_flag_;
}
inline void SearchConfig::set_whiteboard_debug_flag(::google::protobuf::uint32 value) {
  _set_bit(7);
  whiteboard_debug_flag_ = value;
}

// -------------------------------------------------------------------

// RBUDebugInfo

// optional bytes qrw_debug_info = 1;
inline bool RBUDebugInfo::has_qrw_debug_info() const {
  return _has_bit(0);
}
inline void RBUDebugInfo::clear_qrw_debug_info() {
  if (qrw_debug_info_ != &_default_qrw_debug_info_) {
    qrw_debug_info_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RBUDebugInfo::qrw_debug_info() const {
  return *qrw_debug_info_;
}
inline void RBUDebugInfo::set_qrw_debug_info(const ::std::string& value) {
  _set_bit(0);
  if (qrw_debug_info_ == &_default_qrw_debug_info_) {
    qrw_debug_info_ = new ::std::string;
  }
  qrw_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_qrw_debug_info(const char* value) {
  _set_bit(0);
  if (qrw_debug_info_ == &_default_qrw_debug_info_) {
    qrw_debug_info_ = new ::std::string;
  }
  qrw_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_qrw_debug_info(const void* value, size_t size) {
  _set_bit(0);
  if (qrw_debug_info_ == &_default_qrw_debug_info_) {
    qrw_debug_info_ = new ::std::string;
  }
  qrw_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_qrw_debug_info() {
  _set_bit(0);
  if (qrw_debug_info_ == &_default_qrw_debug_info_) {
    qrw_debug_info_ = new ::std::string;
  }
  return qrw_debug_info_;
}

// optional bytes queryd_debug_info = 2;
inline bool RBUDebugInfo::has_queryd_debug_info() const {
  return _has_bit(1);
}
inline void RBUDebugInfo::clear_queryd_debug_info() {
  if (queryd_debug_info_ != &_default_queryd_debug_info_) {
    queryd_debug_info_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RBUDebugInfo::queryd_debug_info() const {
  return *queryd_debug_info_;
}
inline void RBUDebugInfo::set_queryd_debug_info(const ::std::string& value) {
  _set_bit(1);
  if (queryd_debug_info_ == &_default_queryd_debug_info_) {
    queryd_debug_info_ = new ::std::string;
  }
  queryd_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_queryd_debug_info(const char* value) {
  _set_bit(1);
  if (queryd_debug_info_ == &_default_queryd_debug_info_) {
    queryd_debug_info_ = new ::std::string;
  }
  queryd_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_queryd_debug_info(const void* value, size_t size) {
  _set_bit(1);
  if (queryd_debug_info_ == &_default_queryd_debug_info_) {
    queryd_debug_info_ = new ::std::string;
  }
  queryd_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_queryd_debug_info() {
  _set_bit(1);
  if (queryd_debug_info_ == &_default_queryd_debug_info_) {
    queryd_debug_info_ = new ::std::string;
  }
  return queryd_debug_info_;
}

// optional bytes rbu_debug_info = 3;
inline bool RBUDebugInfo::has_rbu_debug_info() const {
  return _has_bit(2);
}
inline void RBUDebugInfo::clear_rbu_debug_info() {
  if (rbu_debug_info_ != &_default_rbu_debug_info_) {
    rbu_debug_info_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RBUDebugInfo::rbu_debug_info() const {
  return *rbu_debug_info_;
}
inline void RBUDebugInfo::set_rbu_debug_info(const ::std::string& value) {
  _set_bit(2);
  if (rbu_debug_info_ == &_default_rbu_debug_info_) {
    rbu_debug_info_ = new ::std::string;
  }
  rbu_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_rbu_debug_info(const char* value) {
  _set_bit(2);
  if (rbu_debug_info_ == &_default_rbu_debug_info_) {
    rbu_debug_info_ = new ::std::string;
  }
  rbu_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_rbu_debug_info(const void* value, size_t size) {
  _set_bit(2);
  if (rbu_debug_info_ == &_default_rbu_debug_info_) {
    rbu_debug_info_ = new ::std::string;
  }
  rbu_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_rbu_debug_info() {
  _set_bit(2);
  if (rbu_debug_info_ == &_default_rbu_debug_info_) {
    rbu_debug_info_ = new ::std::string;
  }
  return rbu_debug_info_;
}

// optional bytes indexd_debug_info = 5;
inline bool RBUDebugInfo::has_indexd_debug_info() const {
  return _has_bit(3);
}
inline void RBUDebugInfo::clear_indexd_debug_info() {
  if (indexd_debug_info_ != &_default_indexd_debug_info_) {
    indexd_debug_info_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RBUDebugInfo::indexd_debug_info() const {
  return *indexd_debug_info_;
}
inline void RBUDebugInfo::set_indexd_debug_info(const ::std::string& value) {
  _set_bit(3);
  if (indexd_debug_info_ == &_default_indexd_debug_info_) {
    indexd_debug_info_ = new ::std::string;
  }
  indexd_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_indexd_debug_info(const char* value) {
  _set_bit(3);
  if (indexd_debug_info_ == &_default_indexd_debug_info_) {
    indexd_debug_info_ = new ::std::string;
  }
  indexd_debug_info_->assign(value);
}
inline void RBUDebugInfo::set_indexd_debug_info(const void* value, size_t size) {
  _set_bit(3);
  if (indexd_debug_info_ == &_default_indexd_debug_info_) {
    indexd_debug_info_ = new ::std::string;
  }
  indexd_debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_indexd_debug_info() {
  _set_bit(3);
  if (indexd_debug_info_ == &_default_indexd_debug_info_) {
    indexd_debug_info_ = new ::std::string;
  }
  return indexd_debug_info_;
}

// optional bytes dignose_queryd_rsp_info = 6;
inline bool RBUDebugInfo::has_dignose_queryd_rsp_info() const {
  return _has_bit(4);
}
inline void RBUDebugInfo::clear_dignose_queryd_rsp_info() {
  if (dignose_queryd_rsp_info_ != &_default_dignose_queryd_rsp_info_) {
    dignose_queryd_rsp_info_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RBUDebugInfo::dignose_queryd_rsp_info() const {
  return *dignose_queryd_rsp_info_;
}
inline void RBUDebugInfo::set_dignose_queryd_rsp_info(const ::std::string& value) {
  _set_bit(4);
  if (dignose_queryd_rsp_info_ == &_default_dignose_queryd_rsp_info_) {
    dignose_queryd_rsp_info_ = new ::std::string;
  }
  dignose_queryd_rsp_info_->assign(value);
}
inline void RBUDebugInfo::set_dignose_queryd_rsp_info(const char* value) {
  _set_bit(4);
  if (dignose_queryd_rsp_info_ == &_default_dignose_queryd_rsp_info_) {
    dignose_queryd_rsp_info_ = new ::std::string;
  }
  dignose_queryd_rsp_info_->assign(value);
}
inline void RBUDebugInfo::set_dignose_queryd_rsp_info(const void* value, size_t size) {
  _set_bit(4);
  if (dignose_queryd_rsp_info_ == &_default_dignose_queryd_rsp_info_) {
    dignose_queryd_rsp_info_ = new ::std::string;
  }
  dignose_queryd_rsp_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_dignose_queryd_rsp_info() {
  _set_bit(4);
  if (dignose_queryd_rsp_info_ == &_default_dignose_queryd_rsp_info_) {
    dignose_queryd_rsp_info_ = new ::std::string;
  }
  return dignose_queryd_rsp_info_;
}

// optional bytes dignose_abs_rsp_info = 7;
inline bool RBUDebugInfo::has_dignose_abs_rsp_info() const {
  return _has_bit(5);
}
inline void RBUDebugInfo::clear_dignose_abs_rsp_info() {
  if (dignose_abs_rsp_info_ != &_default_dignose_abs_rsp_info_) {
    dignose_abs_rsp_info_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RBUDebugInfo::dignose_abs_rsp_info() const {
  return *dignose_abs_rsp_info_;
}
inline void RBUDebugInfo::set_dignose_abs_rsp_info(const ::std::string& value) {
  _set_bit(5);
  if (dignose_abs_rsp_info_ == &_default_dignose_abs_rsp_info_) {
    dignose_abs_rsp_info_ = new ::std::string;
  }
  dignose_abs_rsp_info_->assign(value);
}
inline void RBUDebugInfo::set_dignose_abs_rsp_info(const char* value) {
  _set_bit(5);
  if (dignose_abs_rsp_info_ == &_default_dignose_abs_rsp_info_) {
    dignose_abs_rsp_info_ = new ::std::string;
  }
  dignose_abs_rsp_info_->assign(value);
}
inline void RBUDebugInfo::set_dignose_abs_rsp_info(const void* value, size_t size) {
  _set_bit(5);
  if (dignose_abs_rsp_info_ == &_default_dignose_abs_rsp_info_) {
    dignose_abs_rsp_info_ = new ::std::string;
  }
  dignose_abs_rsp_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_dignose_abs_rsp_info() {
  _set_bit(5);
  if (dignose_abs_rsp_info_ == &_default_dignose_abs_rsp_info_) {
    dignose_abs_rsp_info_ = new ::std::string;
  }
  return dignose_abs_rsp_info_;
}

// optional bytes common_iv_debug_flag = 8;
inline bool RBUDebugInfo::has_common_iv_debug_flag() const {
  return _has_bit(6);
}
inline void RBUDebugInfo::clear_common_iv_debug_flag() {
  if (common_iv_debug_flag_ != &_default_common_iv_debug_flag_) {
    common_iv_debug_flag_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& RBUDebugInfo::common_iv_debug_flag() const {
  return *common_iv_debug_flag_;
}
inline void RBUDebugInfo::set_common_iv_debug_flag(const ::std::string& value) {
  _set_bit(6);
  if (common_iv_debug_flag_ == &_default_common_iv_debug_flag_) {
    common_iv_debug_flag_ = new ::std::string;
  }
  common_iv_debug_flag_->assign(value);
}
inline void RBUDebugInfo::set_common_iv_debug_flag(const char* value) {
  _set_bit(6);
  if (common_iv_debug_flag_ == &_default_common_iv_debug_flag_) {
    common_iv_debug_flag_ = new ::std::string;
  }
  common_iv_debug_flag_->assign(value);
}
inline void RBUDebugInfo::set_common_iv_debug_flag(const void* value, size_t size) {
  _set_bit(6);
  if (common_iv_debug_flag_ == &_default_common_iv_debug_flag_) {
    common_iv_debug_flag_ = new ::std::string;
  }
  common_iv_debug_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUDebugInfo::mutable_common_iv_debug_flag() {
  _set_bit(6);
  if (common_iv_debug_flag_ == &_default_common_iv_debug_flag_) {
    common_iv_debug_flag_ = new ::std::string;
  }
  return common_iv_debug_flag_;
}

// -------------------------------------------------------------------

// RBURequest

// optional bytes search_id = 1;
inline bool RBURequest::has_search_id() const {
  return _has_bit(0);
}
inline void RBURequest::clear_search_id() {
  if (search_id_ != &_default_search_id_) {
    search_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RBURequest::search_id() const {
  return *search_id_;
}
inline void RBURequest::set_search_id(const ::std::string& value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RBURequest::set_search_id(const char* value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RBURequest::set_search_id(const void* value, size_t size) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_search_id() {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  return search_id_;
}

// optional uint32 client_ip = 2;
inline bool RBURequest::has_client_ip() const {
  return _has_bit(1);
}
inline void RBURequest::clear_client_ip() {
  client_ip_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 RBURequest::client_ip() const {
  return client_ip_;
}
inline void RBURequest::set_client_ip(::google::protobuf::uint32 value) {
  _set_bit(1);
  client_ip_ = value;
}

// optional bytes echo = 3;
inline bool RBURequest::has_echo() const {
  return _has_bit(2);
}
inline void RBURequest::clear_echo() {
  if (echo_ != &_default_echo_) {
    echo_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RBURequest::echo() const {
  return *echo_;
}
inline void RBURequest::set_echo(const ::std::string& value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void RBURequest::set_echo(const char* value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void RBURequest::set_echo(const void* value, size_t size) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_echo() {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  return echo_;
}

// required bytes search_query = 4;
inline bool RBURequest::has_search_query() const {
  return _has_bit(3);
}
inline void RBURequest::clear_search_query() {
  if (search_query_ != &_default_search_query_) {
    search_query_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RBURequest::search_query() const {
  return *search_query_;
}
inline void RBURequest::set_search_query(const ::std::string& value) {
  _set_bit(3);
  if (search_query_ == &_default_search_query_) {
    search_query_ = new ::std::string;
  }
  search_query_->assign(value);
}
inline void RBURequest::set_search_query(const char* value) {
  _set_bit(3);
  if (search_query_ == &_default_search_query_) {
    search_query_ = new ::std::string;
  }
  search_query_->assign(value);
}
inline void RBURequest::set_search_query(const void* value, size_t size) {
  _set_bit(3);
  if (search_query_ == &_default_search_query_) {
    search_query_ = new ::std::string;
  }
  search_query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_search_query() {
  _set_bit(3);
  if (search_query_ == &_default_search_query_) {
    search_query_ = new ::std::string;
  }
  return search_query_;
}

// optional uint32 page_id = 5 [default = 0];
inline bool RBURequest::has_page_id() const {
  return _has_bit(4);
}
inline void RBURequest::clear_page_id() {
  page_id_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 RBURequest::page_id() const {
  return page_id_;
}
inline void RBURequest::set_page_id(::google::protobuf::uint32 value) {
  _set_bit(4);
  page_id_ = value;
}

// required uint32 num_per_page = 6;
inline bool RBURequest::has_num_per_page() const {
  return _has_bit(5);
}
inline void RBURequest::clear_num_per_page() {
  num_per_page_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 RBURequest::num_per_page() const {
  return num_per_page_;
}
inline void RBURequest::set_num_per_page(::google::protobuf::uint32 value) {
  _set_bit(5);
  num_per_page_ = value;
}

// optional uint32 rank_type = 7 [default = 0];
inline bool RBURequest::has_rank_type() const {
  return _has_bit(6);
}
inline void RBURequest::clear_rank_type() {
  rank_type_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 RBURequest::rank_type() const {
  return rank_type_;
}
inline void RBURequest::set_rank_type(::google::protobuf::uint32 value) {
  _set_bit(6);
  rank_type_ = value;
}

// optional uint32 debug_flag = 8 [default = 0];
inline bool RBURequest::has_debug_flag() const {
  return _has_bit(7);
}
inline void RBURequest::clear_debug_flag() {
  debug_flag_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 RBURequest::debug_flag() const {
  return debug_flag_;
}
inline void RBURequest::set_debug_flag(::google::protobuf::uint32 value) {
  _set_bit(7);
  debug_flag_ = value;
}

// optional bytes num_filter = 9;
inline bool RBURequest::has_num_filter() const {
  return _has_bit(8);
}
inline void RBURequest::clear_num_filter() {
  if (num_filter_ != &_default_num_filter_) {
    num_filter_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& RBURequest::num_filter() const {
  return *num_filter_;
}
inline void RBURequest::set_num_filter(const ::std::string& value) {
  _set_bit(8);
  if (num_filter_ == &_default_num_filter_) {
    num_filter_ = new ::std::string;
  }
  num_filter_->assign(value);
}
inline void RBURequest::set_num_filter(const char* value) {
  _set_bit(8);
  if (num_filter_ == &_default_num_filter_) {
    num_filter_ = new ::std::string;
  }
  num_filter_->assign(value);
}
inline void RBURequest::set_num_filter(const void* value, size_t size) {
  _set_bit(8);
  if (num_filter_ == &_default_num_filter_) {
    num_filter_ = new ::std::string;
  }
  num_filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_num_filter() {
  _set_bit(8);
  if (num_filter_ == &_default_num_filter_) {
    num_filter_ = new ::std::string;
  }
  return num_filter_;
}

// optional bytes cl_filter = 10;
inline bool RBURequest::has_cl_filter() const {
  return _has_bit(9);
}
inline void RBURequest::clear_cl_filter() {
  if (cl_filter_ != &_default_cl_filter_) {
    cl_filter_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& RBURequest::cl_filter() const {
  return *cl_filter_;
}
inline void RBURequest::set_cl_filter(const ::std::string& value) {
  _set_bit(9);
  if (cl_filter_ == &_default_cl_filter_) {
    cl_filter_ = new ::std::string;
  }
  cl_filter_->assign(value);
}
inline void RBURequest::set_cl_filter(const char* value) {
  _set_bit(9);
  if (cl_filter_ == &_default_cl_filter_) {
    cl_filter_ = new ::std::string;
  }
  cl_filter_->assign(value);
}
inline void RBURequest::set_cl_filter(const void* value, size_t size) {
  _set_bit(9);
  if (cl_filter_ == &_default_cl_filter_) {
    cl_filter_ = new ::std::string;
  }
  cl_filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_cl_filter() {
  _set_bit(9);
  if (cl_filter_ == &_default_cl_filter_) {
    cl_filter_ = new ::std::string;
  }
  return cl_filter_;
}

// optional bytes text_filter = 11;
inline bool RBURequest::has_text_filter() const {
  return _has_bit(10);
}
inline void RBURequest::clear_text_filter() {
  if (text_filter_ != &_default_text_filter_) {
    text_filter_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& RBURequest::text_filter() const {
  return *text_filter_;
}
inline void RBURequest::set_text_filter(const ::std::string& value) {
  _set_bit(10);
  if (text_filter_ == &_default_text_filter_) {
    text_filter_ = new ::std::string;
  }
  text_filter_->assign(value);
}
inline void RBURequest::set_text_filter(const char* value) {
  _set_bit(10);
  if (text_filter_ == &_default_text_filter_) {
    text_filter_ = new ::std::string;
  }
  text_filter_->assign(value);
}
inline void RBURequest::set_text_filter(const void* value, size_t size) {
  _set_bit(10);
  if (text_filter_ == &_default_text_filter_) {
    text_filter_ = new ::std::string;
  }
  text_filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_text_filter() {
  _set_bit(10);
  if (text_filter_ == &_default_text_filter_) {
    text_filter_ = new ::std::string;
  }
  return text_filter_;
}

// optional bytes docid_filter = 12;
inline bool RBURequest::has_docid_filter() const {
  return _has_bit(11);
}
inline void RBURequest::clear_docid_filter() {
  if (docid_filter_ != &_default_docid_filter_) {
    docid_filter_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& RBURequest::docid_filter() const {
  return *docid_filter_;
}
inline void RBURequest::set_docid_filter(const ::std::string& value) {
  _set_bit(11);
  if (docid_filter_ == &_default_docid_filter_) {
    docid_filter_ = new ::std::string;
  }
  docid_filter_->assign(value);
}
inline void RBURequest::set_docid_filter(const char* value) {
  _set_bit(11);
  if (docid_filter_ == &_default_docid_filter_) {
    docid_filter_ = new ::std::string;
  }
  docid_filter_->assign(value);
}
inline void RBURequest::set_docid_filter(const void* value, size_t size) {
  _set_bit(11);
  if (docid_filter_ == &_default_docid_filter_) {
    docid_filter_ = new ::std::string;
  }
  docid_filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_docid_filter() {
  _set_bit(11);
  if (docid_filter_ == &_default_docid_filter_) {
    docid_filter_ = new ::std::string;
  }
  return docid_filter_;
}

// optional bytes extra = 13;
inline bool RBURequest::has_extra() const {
  return _has_bit(12);
}
inline void RBURequest::clear_extra() {
  if (extra_ != &_default_extra_) {
    extra_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& RBURequest::extra() const {
  return *extra_;
}
inline void RBURequest::set_extra(const ::std::string& value) {
  _set_bit(12);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void RBURequest::set_extra(const char* value) {
  _set_bit(12);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void RBURequest::set_extra(const void* value, size_t size) {
  _set_bit(12);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_extra() {
  _set_bit(12);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  return extra_;
}

// optional .SearchConfig search_config = 14;
inline bool RBURequest::has_search_config() const {
  return _has_bit(13);
}
inline void RBURequest::clear_search_config() {
  if (search_config_ != NULL) search_config_->::SearchConfig::Clear();
  _clear_bit(13);
}
inline const ::SearchConfig& RBURequest::search_config() const {
  return search_config_ != NULL ? *search_config_ : *default_instance_->search_config_;
}
inline ::SearchConfig* RBURequest::mutable_search_config() {
  _set_bit(13);
  if (search_config_ == NULL) search_config_ = new ::SearchConfig;
  return search_config_;
}

// optional uint32 source_id = 15;
inline bool RBURequest::has_source_id() const {
  return _has_bit(14);
}
inline void RBURequest::clear_source_id() {
  source_id_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 RBURequest::source_id() const {
  return source_id_;
}
inline void RBURequest::set_source_id(::google::protobuf::uint32 value) {
  _set_bit(14);
  source_id_ = value;
}

// optional uint32 app_id = 16;
inline bool RBURequest::has_app_id() const {
  return _has_bit(15);
}
inline void RBURequest::clear_app_id() {
  app_id_ = 0u;
  _clear_bit(15);
}
inline ::google::protobuf::uint32 RBURequest::app_id() const {
  return app_id_;
}
inline void RBURequest::set_app_id(::google::protobuf::uint32 value) {
  _set_bit(15);
  app_id_ = value;
}

// optional uint32 query_encode = 17;
inline bool RBURequest::has_query_encode() const {
  return _has_bit(16);
}
inline void RBURequest::clear_query_encode() {
  query_encode_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 RBURequest::query_encode() const {
  return query_encode_;
}
inline void RBURequest::set_query_encode(::google::protobuf::uint32 value) {
  _set_bit(16);
  query_encode_ = value;
}

// optional bytes indexd_extension = 18;
inline bool RBURequest::has_indexd_extension() const {
  return _has_bit(17);
}
inline void RBURequest::clear_indexd_extension() {
  if (indexd_extension_ != &_default_indexd_extension_) {
    indexd_extension_->clear();
  }
  _clear_bit(17);
}
inline const ::std::string& RBURequest::indexd_extension() const {
  return *indexd_extension_;
}
inline void RBURequest::set_indexd_extension(const ::std::string& value) {
  _set_bit(17);
  if (indexd_extension_ == &_default_indexd_extension_) {
    indexd_extension_ = new ::std::string;
  }
  indexd_extension_->assign(value);
}
inline void RBURequest::set_indexd_extension(const char* value) {
  _set_bit(17);
  if (indexd_extension_ == &_default_indexd_extension_) {
    indexd_extension_ = new ::std::string;
  }
  indexd_extension_->assign(value);
}
inline void RBURequest::set_indexd_extension(const void* value, size_t size) {
  _set_bit(17);
  if (indexd_extension_ == &_default_indexd_extension_) {
    indexd_extension_ = new ::std::string;
  }
  indexd_extension_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_indexd_extension() {
  _set_bit(17);
  if (indexd_extension_ == &_default_indexd_extension_) {
    indexd_extension_ = new ::std::string;
  }
  return indexd_extension_;
}

// optional bool disable_qc = 19 [default = false];
inline bool RBURequest::has_disable_qc() const {
  return _has_bit(18);
}
inline void RBURequest::clear_disable_qc() {
  disable_qc_ = false;
  _clear_bit(18);
}
inline bool RBURequest::disable_qc() const {
  return disable_qc_;
}
inline void RBURequest::set_disable_qc(bool value) {
  _set_bit(18);
  disable_qc_ = value;
}

// optional bool enable_abs_highlight = 20 [default = false];
inline bool RBURequest::has_enable_abs_highlight() const {
  return _has_bit(19);
}
inline void RBURequest::clear_enable_abs_highlight() {
  enable_abs_highlight_ = false;
  _clear_bit(19);
}
inline bool RBURequest::enable_abs_highlight() const {
  return enable_abs_highlight_;
}
inline void RBURequest::set_enable_abs_highlight(bool value) {
  _set_bit(19);
  enable_abs_highlight_ = value;
}

// optional uint32 second_search = 21 [default = 0];
inline bool RBURequest::has_second_search() const {
  return _has_bit(20);
}
inline void RBURequest::clear_second_search() {
  second_search_ = 0u;
  _clear_bit(20);
}
inline ::google::protobuf::uint32 RBURequest::second_search() const {
  return second_search_;
}
inline void RBURequest::set_second_search(::google::protobuf::uint32 value) {
  _set_bit(20);
  second_search_ = value;
}

// optional bytes sort = 22;
inline bool RBURequest::has_sort() const {
  return _has_bit(21);
}
inline void RBURequest::clear_sort() {
  if (sort_ != &_default_sort_) {
    sort_->clear();
  }
  _clear_bit(21);
}
inline const ::std::string& RBURequest::sort() const {
  return *sort_;
}
inline void RBURequest::set_sort(const ::std::string& value) {
  _set_bit(21);
  if (sort_ == &_default_sort_) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
}
inline void RBURequest::set_sort(const char* value) {
  _set_bit(21);
  if (sort_ == &_default_sort_) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
}
inline void RBURequest::set_sort(const void* value, size_t size) {
  _set_bit(21);
  if (sort_ == &_default_sort_) {
    sort_ = new ::std::string;
  }
  sort_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBURequest::mutable_sort() {
  _set_bit(21);
  if (sort_ == &_default_sort_) {
    sort_ = new ::std::string;
  }
  return sort_;
}

// optional uint32 start_idx = 23;
inline bool RBURequest::has_start_idx() const {
  return _has_bit(22);
}
inline void RBURequest::clear_start_idx() {
  start_idx_ = 0u;
  _clear_bit(22);
}
inline ::google::protobuf::uint32 RBURequest::start_idx() const {
  return start_idx_;
}
inline void RBURequest::set_start_idx(::google::protobuf::uint32 value) {
  _set_bit(22);
  start_idx_ = value;
}

// optional uint32 end_idx = 24;
inline bool RBURequest::has_end_idx() const {
  return _has_bit(23);
}
inline void RBURequest::clear_end_idx() {
  end_idx_ = 0u;
  _clear_bit(23);
}
inline ::google::protobuf::uint32 RBURequest::end_idx() const {
  return end_idx_;
}
inline void RBURequest::set_end_idx(::google::protobuf::uint32 value) {
  _set_bit(23);
  end_idx_ = value;
}

// optional .SemanticInput semantic_request = 51;
inline bool RBURequest::has_semantic_request() const {
  return _has_bit(24);
}
inline void RBURequest::clear_semantic_request() {
  if (semantic_request_ != NULL) semantic_request_->::SemanticInput::Clear();
  _clear_bit(24);
}
inline const ::SemanticInput& RBURequest::semantic_request() const {
  return semantic_request_ != NULL ? *semantic_request_ : *default_instance_->semantic_request_;
}
inline ::SemanticInput* RBURequest::mutable_semantic_request() {
  _set_bit(24);
  if (semantic_request_ == NULL) semantic_request_ = new ::SemanticInput;
  return semantic_request_;
}

// optional uint32 qc_bid = 201 [default = 0];
inline bool RBURequest::has_qc_bid() const {
  return _has_bit(25);
}
inline void RBURequest::clear_qc_bid() {
  qc_bid_ = 0u;
  _clear_bit(25);
}
inline ::google::protobuf::uint32 RBURequest::qc_bid() const {
  return qc_bid_;
}
inline void RBURequest::set_qc_bid(::google::protobuf::uint32 value) {
  _set_bit(25);
  qc_bid_ = value;
}

// optional uint32 max_doc_return = 202 [default = 300];
inline bool RBURequest::has_max_doc_return() const {
  return _has_bit(26);
}
inline void RBURequest::clear_max_doc_return() {
  max_doc_return_ = 300u;
  _clear_bit(26);
}
inline ::google::protobuf::uint32 RBURequest::max_doc_return() const {
  return max_doc_return_;
}
inline void RBURequest::set_max_doc_return(::google::protobuf::uint32 value) {
  _set_bit(26);
  max_doc_return_ = value;
}

// optional uint32 use_qbc_info = 203 [default = 0];
inline bool RBURequest::has_use_qbc_info() const {
  return _has_bit(27);
}
inline void RBURequest::clear_use_qbc_info() {
  use_qbc_info_ = 0u;
  _clear_bit(27);
}
inline ::google::protobuf::uint32 RBURequest::use_qbc_info() const {
  return use_qbc_info_;
}
inline void RBURequest::set_use_qbc_info(::google::protobuf::uint32 value) {
  _set_bit(27);
  use_qbc_info_ = value;
}

// -------------------------------------------------------------------

// RBUResponse

// required int32 retcode = 1;
inline bool RBUResponse::has_retcode() const {
  return _has_bit(0);
}
inline void RBUResponse::clear_retcode() {
  retcode_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RBUResponse::retcode() const {
  return retcode_;
}
inline void RBUResponse::set_retcode(::google::protobuf::int32 value) {
  _set_bit(0);
  retcode_ = value;
}

// optional bytes retmsg = 2;
inline bool RBUResponse::has_retmsg() const {
  return _has_bit(1);
}
inline void RBUResponse::clear_retmsg() {
  if (retmsg_ != &_default_retmsg_) {
    retmsg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RBUResponse::retmsg() const {
  return *retmsg_;
}
inline void RBUResponse::set_retmsg(const ::std::string& value) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
}
inline void RBUResponse::set_retmsg(const char* value) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
}
inline void RBUResponse::set_retmsg(const void* value, size_t size) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUResponse::mutable_retmsg() {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  return retmsg_;
}

// optional bytes echo = 3;
inline bool RBUResponse::has_echo() const {
  return _has_bit(2);
}
inline void RBUResponse::clear_echo() {
  if (echo_ != &_default_echo_) {
    echo_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RBUResponse::echo() const {
  return *echo_;
}
inline void RBUResponse::set_echo(const ::std::string& value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void RBUResponse::set_echo(const char* value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void RBUResponse::set_echo(const void* value, size_t size) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUResponse::mutable_echo() {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  return echo_;
}

// repeated .RBUDocItem result_list = 4;
inline int RBUResponse::result_list_size() const {
  return result_list_.size();
}
inline void RBUResponse::clear_result_list() {
  result_list_.Clear();
}
inline const ::RBUDocItem& RBUResponse::result_list(int index) const {
  return result_list_.Get(index);
}
inline ::RBUDocItem* RBUResponse::mutable_result_list(int index) {
  return result_list_.Mutable(index);
}
inline ::RBUDocItem* RBUResponse::add_result_list() {
  return result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RBUDocItem >&
RBUResponse::result_list() const {
  return result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::RBUDocItem >*
RBUResponse::mutable_result_list() {
  return &result_list_;
}

// required int32 result_num = 5;
inline bool RBUResponse::has_result_num() const {
  return _has_bit(4);
}
inline void RBUResponse::clear_result_num() {
  result_num_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RBUResponse::result_num() const {
  return result_num_;
}
inline void RBUResponse::set_result_num(::google::protobuf::int32 value) {
  _set_bit(4);
  result_num_ = value;
}

// required int32 display_num = 6;
inline bool RBUResponse::has_display_num() const {
  return _has_bit(5);
}
inline void RBUResponse::clear_display_num() {
  display_num_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 RBUResponse::display_num() const {
  return display_num_;
}
inline void RBUResponse::set_display_num(::google::protobuf::int32 value) {
  _set_bit(5);
  display_num_ = value;
}

// required int32 eresult_num = 7;
inline bool RBUResponse::has_eresult_num() const {
  return _has_bit(6);
}
inline void RBUResponse::clear_eresult_num() {
  eresult_num_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RBUResponse::eresult_num() const {
  return eresult_num_;
}
inline void RBUResponse::set_eresult_num(::google::protobuf::int32 value) {
  _set_bit(6);
  eresult_num_ = value;
}

// optional int32 cost_time = 8;
inline bool RBUResponse::has_cost_time() const {
  return _has_bit(7);
}
inline void RBUResponse::clear_cost_time() {
  cost_time_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 RBUResponse::cost_time() const {
  return cost_time_;
}
inline void RBUResponse::set_cost_time(::google::protobuf::int32 value) {
  _set_bit(7);
  cost_time_ = value;
}

// optional .RBUDebugInfo debug_info = 9;
inline bool RBUResponse::has_debug_info() const {
  return _has_bit(8);
}
inline void RBUResponse::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::RBUDebugInfo::Clear();
  _clear_bit(8);
}
inline const ::RBUDebugInfo& RBUResponse::debug_info() const {
  return debug_info_ != NULL ? *debug_info_ : *default_instance_->debug_info_;
}
inline ::RBUDebugInfo* RBUResponse::mutable_debug_info() {
  _set_bit(8);
  if (debug_info_ == NULL) debug_info_ = new ::RBUDebugInfo;
  return debug_info_;
}

// repeated bytes seg_str_list = 10;
inline int RBUResponse::seg_str_list_size() const {
  return seg_str_list_.size();
}
inline void RBUResponse::clear_seg_str_list() {
  seg_str_list_.Clear();
}
inline const ::std::string& RBUResponse::seg_str_list(int index) const {
  return seg_str_list_.Get(index);
}
inline ::std::string* RBUResponse::mutable_seg_str_list(int index) {
  return seg_str_list_.Mutable(index);
}
inline void RBUResponse::set_seg_str_list(int index, const ::std::string& value) {
  seg_str_list_.Mutable(index)->assign(value);
}
inline void RBUResponse::set_seg_str_list(int index, const char* value) {
  seg_str_list_.Mutable(index)->assign(value);
}
inline void RBUResponse::set_seg_str_list(int index, const void* value, size_t size) {
  seg_str_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUResponse::add_seg_str_list() {
  return seg_str_list_.Add();
}
inline void RBUResponse::add_seg_str_list(const ::std::string& value) {
  seg_str_list_.Add()->assign(value);
}
inline void RBUResponse::add_seg_str_list(const char* value) {
  seg_str_list_.Add()->assign(value);
}
inline void RBUResponse::add_seg_str_list(const void* value, size_t size) {
  seg_str_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RBUResponse::seg_str_list() const {
  return seg_str_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RBUResponse::mutable_seg_str_list() {
  return &seg_str_list_;
}

// repeated uint64 seg_int_list = 11;
inline int RBUResponse::seg_int_list_size() const {
  return seg_int_list_.size();
}
inline void RBUResponse::clear_seg_int_list() {
  seg_int_list_.Clear();
}
inline ::google::protobuf::uint64 RBUResponse::seg_int_list(int index) const {
  return seg_int_list_.Get(index);
}
inline void RBUResponse::set_seg_int_list(int index, ::google::protobuf::uint64 value) {
  seg_int_list_.Set(index, value);
}
inline void RBUResponse::add_seg_int_list(::google::protobuf::uint64 value) {
  seg_int_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RBUResponse::seg_int_list() const {
  return seg_int_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RBUResponse::mutable_seg_int_list() {
  return &seg_int_list_;
}

// optional bytes qrw_result = 12;
inline bool RBUResponse::has_qrw_result() const {
  return _has_bit(11);
}
inline void RBUResponse::clear_qrw_result() {
  if (qrw_result_ != &_default_qrw_result_) {
    qrw_result_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& RBUResponse::qrw_result() const {
  return *qrw_result_;
}
inline void RBUResponse::set_qrw_result(const ::std::string& value) {
  _set_bit(11);
  if (qrw_result_ == &_default_qrw_result_) {
    qrw_result_ = new ::std::string;
  }
  qrw_result_->assign(value);
}
inline void RBUResponse::set_qrw_result(const char* value) {
  _set_bit(11);
  if (qrw_result_ == &_default_qrw_result_) {
    qrw_result_ = new ::std::string;
  }
  qrw_result_->assign(value);
}
inline void RBUResponse::set_qrw_result(const void* value, size_t size) {
  _set_bit(11);
  if (qrw_result_ == &_default_qrw_result_) {
    qrw_result_ = new ::std::string;
  }
  qrw_result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUResponse::mutable_qrw_result() {
  _set_bit(11);
  if (qrw_result_ == &_default_qrw_result_) {
    qrw_result_ = new ::std::string;
  }
  return qrw_result_;
}

// optional bytes l4_output = 13;
inline bool RBUResponse::has_l4_output() const {
  return _has_bit(12);
}
inline void RBUResponse::clear_l4_output() {
  if (l4_output_ != &_default_l4_output_) {
    l4_output_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& RBUResponse::l4_output() const {
  return *l4_output_;
}
inline void RBUResponse::set_l4_output(const ::std::string& value) {
  _set_bit(12);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(value);
}
inline void RBUResponse::set_l4_output(const char* value) {
  _set_bit(12);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(value);
}
inline void RBUResponse::set_l4_output(const void* value, size_t size) {
  _set_bit(12);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  l4_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RBUResponse::mutable_l4_output() {
  _set_bit(12);
  if (l4_output_ == &_default_l4_output_) {
    l4_output_ = new ::std::string;
  }
  return l4_output_;
}

// repeated .PlatformOutItem platform_output = 14;
inline int RBUResponse::platform_output_size() const {
  return platform_output_.size();
}
inline void RBUResponse::clear_platform_output() {
  platform_output_.Clear();
}
inline const ::PlatformOutItem& RBUResponse::platform_output(int index) const {
  return platform_output_.Get(index);
}
inline ::PlatformOutItem* RBUResponse::mutable_platform_output(int index) {
  return platform_output_.Mutable(index);
}
inline ::PlatformOutItem* RBUResponse::add_platform_output() {
  return platform_output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlatformOutItem >&
RBUResponse::platform_output() const {
  return platform_output_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlatformOutItem >*
RBUResponse::mutable_platform_output() {
  return &platform_output_;
}

// optional .SemanticOutput semantic_response = 51;
inline bool RBUResponse::has_semantic_response() const {
  return _has_bit(14);
}
inline void RBUResponse::clear_semantic_response() {
  if (semantic_response_ != NULL) semantic_response_->::SemanticOutput::Clear();
  _clear_bit(14);
}
inline const ::SemanticOutput& RBUResponse::semantic_response() const {
  return semantic_response_ != NULL ? *semantic_response_ : *default_instance_->semantic_response_;
}
inline ::SemanticOutput* RBUResponse::mutable_semantic_response() {
  _set_bit(14);
  if (semantic_response_ == NULL) semantic_response_ = new ::SemanticOutput;
  return semantic_response_;
}

// -------------------------------------------------------------------

// PlatformOutItem

// optional int32 qrw_item_idx = 1;
inline bool PlatformOutItem::has_qrw_item_idx() const {
  return _has_bit(0);
}
inline void PlatformOutItem::clear_qrw_item_idx() {
  qrw_item_idx_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PlatformOutItem::qrw_item_idx() const {
  return qrw_item_idx_;
}
inline void PlatformOutItem::set_qrw_item_idx(::google::protobuf::int32 value) {
  _set_bit(0);
  qrw_item_idx_ = value;
}

// optional bytes platform_output = 2;
inline bool PlatformOutItem::has_platform_output() const {
  return _has_bit(1);
}
inline void PlatformOutItem::clear_platform_output() {
  if (platform_output_ != &_default_platform_output_) {
    platform_output_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PlatformOutItem::platform_output() const {
  return *platform_output_;
}
inline void PlatformOutItem::set_platform_output(const ::std::string& value) {
  _set_bit(1);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(value);
}
inline void PlatformOutItem::set_platform_output(const char* value) {
  _set_bit(1);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(value);
}
inline void PlatformOutItem::set_platform_output(const void* value, size_t size) {
  _set_bit(1);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  platform_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlatformOutItem::mutable_platform_output() {
  _set_bit(1);
  if (platform_output_ == &_default_platform_output_) {
    platform_output_ = new ::std::string;
  }
  return platform_output_;
}

// -------------------------------------------------------------------

// SemanticInput

// optional uint32 semantic_page_id = 1;
inline bool SemanticInput::has_semantic_page_id() const {
  return _has_bit(0);
}
inline void SemanticInput::clear_semantic_page_id() {
  semantic_page_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SemanticInput::semantic_page_id() const {
  return semantic_page_id_;
}
inline void SemanticInput::set_semantic_page_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  semantic_page_id_ = value;
}

// optional uint32 semantic_num_per_page = 2;
inline bool SemanticInput::has_semantic_num_per_page() const {
  return _has_bit(1);
}
inline void SemanticInput::clear_semantic_num_per_page() {
  semantic_num_per_page_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 SemanticInput::semantic_num_per_page() const {
  return semantic_num_per_page_;
}
inline void SemanticInput::set_semantic_num_per_page(::google::protobuf::uint32 value) {
  _set_bit(1);
  semantic_num_per_page_ = value;
}

// optional uint32 semantic_start_idx = 3;
inline bool SemanticInput::has_semantic_start_idx() const {
  return _has_bit(2);
}
inline void SemanticInput::clear_semantic_start_idx() {
  semantic_start_idx_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 SemanticInput::semantic_start_idx() const {
  return semantic_start_idx_;
}
inline void SemanticInput::set_semantic_start_idx(::google::protobuf::uint32 value) {
  _set_bit(2);
  semantic_start_idx_ = value;
}

// optional uint32 semantic_end_idx = 4;
inline bool SemanticInput::has_semantic_end_idx() const {
  return _has_bit(3);
}
inline void SemanticInput::clear_semantic_end_idx() {
  semantic_end_idx_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 SemanticInput::semantic_end_idx() const {
  return semantic_end_idx_;
}
inline void SemanticInput::set_semantic_end_idx(::google::protobuf::uint32 value) {
  _set_bit(3);
  semantic_end_idx_ = value;
}

// optional .SemanticReqType semantic_req_type = 5 [default = NORMAL_ONLY_REQ];
inline bool SemanticInput::has_semantic_req_type() const {
  return _has_bit(4);
}
inline void SemanticInput::clear_semantic_req_type() {
  semantic_req_type_ = 2;
  _clear_bit(4);
}
inline SemanticReqType SemanticInput::semantic_req_type() const {
  return static_cast< SemanticReqType >(semantic_req_type_);
}
inline void SemanticInput::set_semantic_req_type(SemanticReqType value) {
  GOOGLE_DCHECK(SemanticReqType_IsValid(value));
  _set_bit(4);
  semantic_req_type_ = value;
}

// -------------------------------------------------------------------

// SemanticOutput

// repeated .RBUDocItem semantic_result_list = 1;
inline int SemanticOutput::semantic_result_list_size() const {
  return semantic_result_list_.size();
}
inline void SemanticOutput::clear_semantic_result_list() {
  semantic_result_list_.Clear();
}
inline const ::RBUDocItem& SemanticOutput::semantic_result_list(int index) const {
  return semantic_result_list_.Get(index);
}
inline ::RBUDocItem* SemanticOutput::mutable_semantic_result_list(int index) {
  return semantic_result_list_.Mutable(index);
}
inline ::RBUDocItem* SemanticOutput::add_semantic_result_list() {
  return semantic_result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RBUDocItem >&
SemanticOutput::semantic_result_list() const {
  return semantic_result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::RBUDocItem >*
SemanticOutput::mutable_semantic_result_list() {
  return &semantic_result_list_;
}

// optional int32 semantic_result_num = 2;
inline bool SemanticOutput::has_semantic_result_num() const {
  return _has_bit(1);
}
inline void SemanticOutput::clear_semantic_result_num() {
  semantic_result_num_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SemanticOutput::semantic_result_num() const {
  return semantic_result_num_;
}
inline void SemanticOutput::set_semantic_result_num(::google::protobuf::int32 value) {
  _set_bit(1);
  semantic_result_num_ = value;
}

// optional int32 semantic_display_num = 3;
inline bool SemanticOutput::has_semantic_display_num() const {
  return _has_bit(2);
}
inline void SemanticOutput::clear_semantic_display_num() {
  semantic_display_num_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SemanticOutput::semantic_display_num() const {
  return semantic_display_num_;
}
inline void SemanticOutput::set_semantic_display_num(::google::protobuf::int32 value) {
  _set_bit(2);
  semantic_display_num_ = value;
}

// optional int32 semantic_eresult_num = 4;
inline bool SemanticOutput::has_semantic_eresult_num() const {
  return _has_bit(3);
}
inline void SemanticOutput::clear_semantic_eresult_num() {
  semantic_eresult_num_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SemanticOutput::semantic_eresult_num() const {
  return semantic_eresult_num_;
}
inline void SemanticOutput::set_semantic_eresult_num(::google::protobuf::int32 value) {
  _set_bit(3);
  semantic_eresult_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SemanticReqType>() {
  return SemanticReqType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_5finterface_2eproto__INCLUDED
