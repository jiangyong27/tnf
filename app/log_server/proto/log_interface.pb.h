// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_interface.proto

#ifndef PROTOBUF_log_5finterface_2eproto__INCLUDED
#define PROTOBUF_log_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace log_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_5finterface_2eproto();
void protobuf_AssignDesc_log_5finterface_2eproto();
void protobuf_ShutdownFile_log_5finterface_2eproto();

class LogRequest;
class LogResponse;

// ===================================================================

class LogRequest : public ::google::protobuf::Message {
 public:
  LogRequest();
  virtual ~LogRequest();
  
  LogRequest(const LogRequest& from);
  
  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRequest& default_instance();
  
  void Swap(LogRequest* other);
  
  // implements Message ----------------------------------------------
  
  LogRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRequest& from);
  void MergeFrom(const LogRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes log_content = 1;
  inline bool has_log_content() const;
  inline void clear_log_content();
  static const int kLogContentFieldNumber = 1;
  inline const ::std::string& log_content() const;
  inline void set_log_content(const ::std::string& value);
  inline void set_log_content(const char* value);
  inline void set_log_content(const void* value, size_t size);
  inline ::std::string* mutable_log_content();
  
  // optional bytes echo = 2;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 2;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const void* value, size_t size);
  inline ::std::string* mutable_echo();
  
  // optional bytes extra = 3;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 3;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const void* value, size_t size);
  inline ::std::string* mutable_extra();
  
  // @@protoc_insertion_point(class_scope:log_server.LogRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* log_content_;
  static const ::std::string _default_log_content_;
  ::std::string* echo_;
  static const ::std::string _default_echo_;
  ::std::string* extra_;
  static const ::std::string _default_extra_;
  friend void  protobuf_AddDesc_log_5finterface_2eproto();
  friend void protobuf_AssignDesc_log_5finterface_2eproto();
  friend void protobuf_ShutdownFile_log_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogResponse : public ::google::protobuf::Message {
 public:
  LogResponse();
  virtual ~LogResponse();
  
  LogResponse(const LogResponse& from);
  
  inline LogResponse& operator=(const LogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogResponse& default_instance();
  
  void Swap(LogResponse* other);
  
  // implements Message ----------------------------------------------
  
  LogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogResponse& from);
  void MergeFrom(const LogResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);
  
  // optional bytes retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const void* value, size_t size);
  inline ::std::string* mutable_retmsg();
  
  // optional bytes echo = 3;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 3;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const void* value, size_t size);
  inline ::std::string* mutable_echo();
  
  // optional bytes extra = 4;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 4;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const void* value, size_t size);
  inline ::std::string* mutable_extra();
  
  // @@protoc_insertion_point(class_scope:log_server.LogResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 retcode_;
  ::std::string* retmsg_;
  static const ::std::string _default_retmsg_;
  ::std::string* echo_;
  static const ::std::string _default_echo_;
  ::std::string* extra_;
  static const ::std::string _default_extra_;
  friend void  protobuf_AddDesc_log_5finterface_2eproto();
  friend void protobuf_AssignDesc_log_5finterface_2eproto();
  friend void protobuf_ShutdownFile_log_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LogRequest

// optional bytes log_content = 1;
inline bool LogRequest::has_log_content() const {
  return _has_bit(0);
}
inline void LogRequest::clear_log_content() {
  if (log_content_ != &_default_log_content_) {
    log_content_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& LogRequest::log_content() const {
  return *log_content_;
}
inline void LogRequest::set_log_content(const ::std::string& value) {
  _set_bit(0);
  if (log_content_ == &_default_log_content_) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
}
inline void LogRequest::set_log_content(const char* value) {
  _set_bit(0);
  if (log_content_ == &_default_log_content_) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
}
inline void LogRequest::set_log_content(const void* value, size_t size) {
  _set_bit(0);
  if (log_content_ == &_default_log_content_) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRequest::mutable_log_content() {
  _set_bit(0);
  if (log_content_ == &_default_log_content_) {
    log_content_ = new ::std::string;
  }
  return log_content_;
}

// optional bytes echo = 2;
inline bool LogRequest::has_echo() const {
  return _has_bit(1);
}
inline void LogRequest::clear_echo() {
  if (echo_ != &_default_echo_) {
    echo_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& LogRequest::echo() const {
  return *echo_;
}
inline void LogRequest::set_echo(const ::std::string& value) {
  _set_bit(1);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void LogRequest::set_echo(const char* value) {
  _set_bit(1);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void LogRequest::set_echo(const void* value, size_t size) {
  _set_bit(1);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRequest::mutable_echo() {
  _set_bit(1);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  return echo_;
}

// optional bytes extra = 3;
inline bool LogRequest::has_extra() const {
  return _has_bit(2);
}
inline void LogRequest::clear_extra() {
  if (extra_ != &_default_extra_) {
    extra_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& LogRequest::extra() const {
  return *extra_;
}
inline void LogRequest::set_extra(const ::std::string& value) {
  _set_bit(2);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void LogRequest::set_extra(const char* value) {
  _set_bit(2);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void LogRequest::set_extra(const void* value, size_t size) {
  _set_bit(2);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRequest::mutable_extra() {
  _set_bit(2);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  return extra_;
}

// -------------------------------------------------------------------

// LogResponse

// required int32 retcode = 1;
inline bool LogResponse::has_retcode() const {
  return _has_bit(0);
}
inline void LogResponse::clear_retcode() {
  retcode_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 LogResponse::retcode() const {
  return retcode_;
}
inline void LogResponse::set_retcode(::google::protobuf::int32 value) {
  _set_bit(0);
  retcode_ = value;
}

// optional bytes retmsg = 2;
inline bool LogResponse::has_retmsg() const {
  return _has_bit(1);
}
inline void LogResponse::clear_retmsg() {
  if (retmsg_ != &_default_retmsg_) {
    retmsg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& LogResponse::retmsg() const {
  return *retmsg_;
}
inline void LogResponse::set_retmsg(const ::std::string& value) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
}
inline void LogResponse::set_retmsg(const char* value) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
}
inline void LogResponse::set_retmsg(const void* value, size_t size) {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogResponse::mutable_retmsg() {
  _set_bit(1);
  if (retmsg_ == &_default_retmsg_) {
    retmsg_ = new ::std::string;
  }
  return retmsg_;
}

// optional bytes echo = 3;
inline bool LogResponse::has_echo() const {
  return _has_bit(2);
}
inline void LogResponse::clear_echo() {
  if (echo_ != &_default_echo_) {
    echo_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& LogResponse::echo() const {
  return *echo_;
}
inline void LogResponse::set_echo(const ::std::string& value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void LogResponse::set_echo(const char* value) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
}
inline void LogResponse::set_echo(const void* value, size_t size) {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogResponse::mutable_echo() {
  _set_bit(2);
  if (echo_ == &_default_echo_) {
    echo_ = new ::std::string;
  }
  return echo_;
}

// optional bytes extra = 4;
inline bool LogResponse::has_extra() const {
  return _has_bit(3);
}
inline void LogResponse::clear_extra() {
  if (extra_ != &_default_extra_) {
    extra_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& LogResponse::extra() const {
  return *extra_;
}
inline void LogResponse::set_extra(const ::std::string& value) {
  _set_bit(3);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void LogResponse::set_extra(const char* value) {
  _set_bit(3);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void LogResponse::set_extra(const void* value, size_t size) {
  _set_bit(3);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogResponse::mutable_extra() {
  _set_bit(3);
  if (extra_ == &_default_extra_) {
    extra_ = new ::std::string;
  }
  return extra_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log_server

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_5finterface_2eproto__INCLUDED
